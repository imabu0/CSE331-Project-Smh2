
fiveeight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000556c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de0  0800567c  0800567c  0000667c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800645c  0800645c  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800645c  0800645c  00008068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800645c  0800645c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800645c  0800645c  0000745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006460  08006460  00007460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006464  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  20000068  080064cc  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  080064cc  00008744  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed15  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002011  00000000  00000000  00016da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00018db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c38  00000000  00000000  00019d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018437  00000000  00000000  0001a958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119ce  00000000  00000000  00032d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d2e5  00000000  00000000  0004475d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1a42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d8  00000000  00000000  000d1a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d6360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08005664 	.word	0x08005664

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08005664 	.word	0x08005664

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	@ 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c3a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	@ 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	@ 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__aeabi_f2uiz>:
 8000e88:	0042      	lsls	r2, r0, #1
 8000e8a:	d20e      	bcs.n	8000eaa <__aeabi_f2uiz+0x22>
 8000e8c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e90:	d30b      	bcc.n	8000eaa <__aeabi_f2uiz+0x22>
 8000e92:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e96:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e9a:	d409      	bmi.n	8000eb0 <__aeabi_f2uiz+0x28>
 8000e9c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ea0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ea4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ea8:	4770      	bx	lr
 8000eaa:	f04f 0000 	mov.w	r0, #0
 8000eae:	4770      	bx	lr
 8000eb0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000eb4:	d101      	bne.n	8000eba <__aeabi_f2uiz+0x32>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d102      	bne.n	8000ec0 <__aeabi_f2uiz+0x38>
 8000eba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ebe:	4770      	bx	lr
 8000ec0:	f04f 0000 	mov.w	r0, #0
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <microDelay>:
uint8_t TFI = 0;
uint8_t TFD = 0;
char strCopy[15];

void microDelay (uint16_t delay)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ed2:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <microDelay+0x2c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000eda:	bf00      	nop
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <microDelay+0x2c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3f9      	bcc.n	8000edc <microDelay+0x14>
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	200000d8 	.word	0x200000d8

08000ef8 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000f0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f12:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	482c      	ldr	r0, [pc, #176]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000f26:	f001 fb0f 	bl	8002548 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f30:	4829      	ldr	r0, [pc, #164]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000f32:	f001 fca4 	bl	800287e <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000f36:	2014      	movs	r0, #20
 8000f38:	f001 f9fe 	bl	8002338 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f42:	4825      	ldr	r0, [pc, #148]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000f44:	f001 fc9b 	bl	800287e <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000f48:	201e      	movs	r0, #30
 8000f4a:	f7ff ffbd 	bl	8000ec8 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481f      	ldr	r0, [pc, #124]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000f5c:	f001 faf4 	bl	8002548 <HAL_GPIO_Init>
  microDelay (40);
 8000f60:	2028      	movs	r0, #40	@ 0x28
 8000f62:	f7ff ffb1 	bl	8000ec8 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000f66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f6a:	481b      	ldr	r0, [pc, #108]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000f6c:	f001 fc70 	bl	8002850 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10c      	bne.n	8000f90 <DHT11_Start+0x98>
  {
    microDelay (80);
 8000f76:	2050      	movs	r0, #80	@ 0x50
 8000f78:	f7ff ffa6 	bl	8000ec8 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000f7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f80:	4815      	ldr	r0, [pc, #84]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000f82:	f001 fc65 	bl	8002850 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <DHT11_Start+0x98>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000f90:	f001 f9c8 	bl	8002324 <HAL_GetTick>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a11      	ldr	r2, [pc, #68]	@ (8000fdc <DHT11_Start+0xe4>)
 8000f98:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000f9a:	f001 f9c3 	bl	8002324 <HAL_GetTick>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe0 <DHT11_Start+0xe8>)
 8000fa2:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000fa4:	e004      	b.n	8000fb0 <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 8000fa6:	f001 f9bd 	bl	8002324 <HAL_GetTick>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe0 <DHT11_Start+0xe8>)
 8000fae:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000fb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fb4:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000fb6:	f001 fc4b 	bl	8002850 <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <DHT11_Start+0xd6>
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <DHT11_Start+0xe4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	1c9a      	adds	r2, r3, #2
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <DHT11_Start+0xe8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d8eb      	bhi.n	8000fa6 <DHT11_Start+0xae>
  }
  return Response;
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	200001b0 	.word	0x200001b0
 8000fe0:	200001d8 	.word	0x200001d8

08000fe4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	e066      	b.n	80010be <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000ff0:	f001 f998 	bl	8002324 <HAL_GetTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a36      	ldr	r2, [pc, #216]	@ (80010d0 <DHT11_Read+0xec>)
 8000ff8:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000ffa:	f001 f993 	bl	8002324 <HAL_GetTick>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a34      	ldr	r2, [pc, #208]	@ (80010d4 <DHT11_Read+0xf0>)
 8001002:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001004:	e004      	b.n	8001010 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001006:	f001 f98d 	bl	8002324 <HAL_GetTick>
 800100a:	4603      	mov	r3, r0
 800100c:	4a31      	ldr	r2, [pc, #196]	@ (80010d4 <DHT11_Read+0xf0>)
 800100e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001010:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001014:	4830      	ldr	r0, [pc, #192]	@ (80010d8 <DHT11_Read+0xf4>)
 8001016:	f001 fc1b 	bl	8002850 <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d106      	bne.n	800102e <DHT11_Read+0x4a>
 8001020:	4b2b      	ldr	r3, [pc, #172]	@ (80010d0 <DHT11_Read+0xec>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	1c9a      	adds	r2, r3, #2
 8001026:	4b2b      	ldr	r3, [pc, #172]	@ (80010d4 <DHT11_Read+0xf0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d8eb      	bhi.n	8001006 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 800102e:	2028      	movs	r0, #40	@ 0x28
 8001030:	f7ff ff4a 	bl	8000ec8 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001034:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001038:	4827      	ldr	r0, [pc, #156]	@ (80010d8 <DHT11_Read+0xf4>)
 800103a:	f001 fc09 	bl	8002850 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10e      	bne.n	8001062 <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2201      	movs	r2, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	b25b      	sxtb	r3, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	b25a      	sxtb	r2, r3
 8001056:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800105a:	4013      	ands	r3, r2
 800105c:	b25b      	sxtb	r3, r3
 800105e:	71bb      	strb	r3, [r7, #6]
 8001060:	e00b      	b.n	800107a <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f1c3 0307 	rsb	r3, r3, #7
 8001068:	2201      	movs	r2, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	b25a      	sxtb	r2, r3
 8001070:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001074:	4313      	orrs	r3, r2
 8001076:	b25b      	sxtb	r3, r3
 8001078:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 800107a:	f001 f953 	bl	8002324 <HAL_GetTick>
 800107e:	4603      	mov	r3, r0
 8001080:	4a13      	ldr	r2, [pc, #76]	@ (80010d0 <DHT11_Read+0xec>)
 8001082:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001084:	f001 f94e 	bl	8002324 <HAL_GetTick>
 8001088:	4603      	mov	r3, r0
 800108a:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <DHT11_Read+0xf0>)
 800108c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800108e:	e004      	b.n	800109a <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001090:	f001 f948 	bl	8002324 <HAL_GetTick>
 8001094:	4603      	mov	r3, r0
 8001096:	4a0f      	ldr	r2, [pc, #60]	@ (80010d4 <DHT11_Read+0xf0>)
 8001098:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800109a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109e:	480e      	ldr	r0, [pc, #56]	@ (80010d8 <DHT11_Read+0xf4>)
 80010a0:	f001 fbd6 	bl	8002850 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <DHT11_Read+0xd4>
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <DHT11_Read+0xec>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1c9a      	adds	r2, r3, #2
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <DHT11_Read+0xf0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8eb      	bhi.n	8001090 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	3301      	adds	r3, #1
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	d995      	bls.n	8000ff0 <DHT11_Read+0xc>
    }
  }
  return b;
 80010c4:	79bb      	ldrb	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200001b0 	.word	0x200001b0
 80010d4:	200001d8 	.word	0x200001d8
 80010d8:	40010c00 	.word	0x40010c00

080010dc <Servo_Set_Angle>:

void Servo_Set_Angle(uint8_t angle) {
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
    uint16_t pulse = (angle * 2000 / 180) + 500; // 0.5ms to 2.5ms
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	4a09      	ldr	r2, [pc, #36]	@ (8001118 <Servo_Set_Angle+0x3c>)
 80010f2:	fb82 1203 	smull	r1, r2, r2, r3
 80010f6:	441a      	add	r2, r3
 80010f8:	11d2      	asrs	r2, r2, #7
 80010fa:	17db      	asrs	r3, r3, #31
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001104:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);
 8001106:	4b05      	ldr	r3, [pc, #20]	@ (800111c <Servo_Set_Angle+0x40>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	89fa      	ldrh	r2, [r7, #14]
 800110c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	b60b60b7 	.word	0xb60b60b7
 800111c:	20000120 	.word	0x20000120

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001126:	f001 f8a5 	bl	8002274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112a:	f000 fa4b 	bl	80015c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112e:	f000 fbad 	bl	800188c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001132:	f000 fa8d 	bl	8001650 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001136:	f000 fab9 	bl	80016ac <MX_TIM1_Init>
  MX_TIM2_Init();
 800113a:	f000 fb07 	bl	800174c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800113e:	f000 fb7b 	bl	8001838 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001142:	48b5      	ldr	r0, [pc, #724]	@ (8001418 <main+0x2f8>)
 8001144:	f002 fdde 	bl	8003d04 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800114e:	48b3      	ldr	r0, [pc, #716]	@ (800141c <main+0x2fc>)
 8001150:	f001 fb95 	bl	800287e <HAL_GPIO_WritePin>
  SSD1306_Init();
 8001154:	f000 fc2a 	bl	80019ac <SSD1306_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001158:	2100      	movs	r1, #0
 800115a:	48af      	ldr	r0, [pc, #700]	@ (8001418 <main+0x2f8>)
 800115c:	f002 fe74 	bl	8003e48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001160:	2104      	movs	r1, #4
 8001162:	48af      	ldr	r0, [pc, #700]	@ (8001420 <main+0x300>)
 8001164:	f002 fe70 	bl	8003e48 <HAL_TIM_PWM_Start>
  uint8_t door_open = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001172:	48aa      	ldr	r0, [pc, #680]	@ (800141c <main+0x2fc>)
 8001174:	f001 fb83 	bl	800287e <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001178:	4ba7      	ldr	r3, [pc, #668]	@ (8001418 <main+0x2f8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	@ 0x24
      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8001180:	bf00      	nop
 8001182:	4ba5      	ldr	r3, [pc, #660]	@ (8001418 <main+0x2f8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001188:	2b09      	cmp	r3, #9
 800118a:	d9fa      	bls.n	8001182 <main+0x62>
      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001192:	48a2      	ldr	r0, [pc, #648]	@ (800141c <main+0x2fc>)
 8001194:	f001 fb73 	bl	800287e <HAL_GPIO_WritePin>

      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001198:	f001 f8c4 	bl	8002324 <HAL_GetTick>
 800119c:	4603      	mov	r3, r0
 800119e:	4aa1      	ldr	r2, [pc, #644]	@ (8001424 <main+0x304>)
 80011a0:	6013      	str	r3, [r2, #0]
      // wait for the echo pin to go high
      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 80011a2:	bf00      	nop
 80011a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a8:	489c      	ldr	r0, [pc, #624]	@ (800141c <main+0x2fc>)
 80011aa:	f001 fb51 	bl	8002850 <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d108      	bne.n	80011c6 <main+0xa6>
 80011b4:	4b9b      	ldr	r3, [pc, #620]	@ (8001424 <main+0x304>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f103 040a 	add.w	r4, r3, #10
 80011bc:	f001 f8b2 	bl	8002324 <HAL_GetTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	429c      	cmp	r4, r3
 80011c4:	d8ee      	bhi.n	80011a4 <main+0x84>
      Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 80011c6:	4b94      	ldr	r3, [pc, #592]	@ (8001418 <main+0x2f8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011cc:	4a96      	ldr	r2, [pc, #600]	@ (8001428 <main+0x308>)
 80011ce:	6013      	str	r3, [r2, #0]

      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80011d0:	f001 f8a8 	bl	8002324 <HAL_GetTick>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a93      	ldr	r2, [pc, #588]	@ (8001424 <main+0x304>)
 80011d8:	6013      	str	r3, [r2, #0]
      // wait for the echo pin to go low
      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80011da:	bf00      	nop
 80011dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011e0:	488e      	ldr	r0, [pc, #568]	@ (800141c <main+0x2fc>)
 80011e2:	f001 fb35 	bl	8002850 <HAL_GPIO_ReadPin>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <main+0xde>
 80011ec:	4b8d      	ldr	r3, [pc, #564]	@ (8001424 <main+0x304>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 80011f4:	f001 f896 	bl	8002324 <HAL_GetTick>
 80011f8:	4603      	mov	r3, r0
 80011fa:	429c      	cmp	r4, r3
 80011fc:	d8ee      	bhi.n	80011dc <main+0xbc>
      Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80011fe:	4b86      	ldr	r3, [pc, #536]	@ (8001418 <main+0x2f8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001204:	4a89      	ldr	r2, [pc, #548]	@ (800142c <main+0x30c>)
 8001206:	6013      	str	r3, [r2, #0]

      Distance = (Value2-Value1)* 0.034/2;
 8001208:	4b88      	ldr	r3, [pc, #544]	@ (800142c <main+0x30c>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b86      	ldr	r3, [pc, #536]	@ (8001428 <main+0x308>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f8de 	bl	80003d4 <__aeabi_ui2d>
 8001218:	a37d      	add	r3, pc, #500	@ (adr r3, 8001410 <main+0x2f0>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff f953 	bl	80004c8 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001232:	f7ff fa73 	bl	800071c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fb55 	bl	80008ec <__aeabi_d2uiz>
 8001242:	4603      	mov	r3, r0
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b7a      	ldr	r3, [pc, #488]	@ (8001430 <main+0x310>)
 8001248:	801a      	strh	r2, [r3, #0]

      sprintf(strCopy,"D : %d    ", Distance);
 800124a:	4b79      	ldr	r3, [pc, #484]	@ (8001430 <main+0x310>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	4978      	ldr	r1, [pc, #480]	@ (8001434 <main+0x314>)
 8001252:	4879      	ldr	r0, [pc, #484]	@ (8001438 <main+0x318>)
 8001254:	f003 fd56 	bl	8004d04 <siprintf>
      SSD1306_GotoXY (0, 40);
 8001258:	2128      	movs	r1, #40	@ 0x28
 800125a:	2000      	movs	r0, #0
 800125c:	f000 fd0e 	bl	8001c7c <SSD1306_GotoXY>
      SSD1306_Puts (strCopy, &Font_11x18, 1);
 8001260:	2201      	movs	r2, #1
 8001262:	4976      	ldr	r1, [pc, #472]	@ (800143c <main+0x31c>)
 8001264:	4874      	ldr	r0, [pc, #464]	@ (8001438 <main+0x318>)
 8001266:	f000 fd9d 	bl	8001da4 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 800126a:	f000 fc63 	bl	8001b34 <SSD1306_UpdateScreen>

      if(DHT11_Start())
 800126e:	f7ff fe43 	bl	8000ef8 <DHT11_Start>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 8143 	beq.w	8001500 <main+0x3e0>
	  {
		RHI = DHT11_Read(); // Relative humidity integral
 800127a:	f7ff feb3 	bl	8000fe4 <DHT11_Read>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	4b6f      	ldr	r3, [pc, #444]	@ (8001440 <main+0x320>)
 8001284:	701a      	strb	r2, [r3, #0]
		RHD = DHT11_Read(); // Relative humidity decimal
 8001286:	f7ff fead 	bl	8000fe4 <DHT11_Read>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b6d      	ldr	r3, [pc, #436]	@ (8001444 <main+0x324>)
 8001290:	701a      	strb	r2, [r3, #0]
		TCI = DHT11_Read(); // Celsius integral
 8001292:	f7ff fea7 	bl	8000fe4 <DHT11_Read>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b6b      	ldr	r3, [pc, #428]	@ (8001448 <main+0x328>)
 800129c:	701a      	strb	r2, [r3, #0]
		TCD = DHT11_Read(); // Celsius decimal
 800129e:	f7ff fea1 	bl	8000fe4 <DHT11_Read>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b69      	ldr	r3, [pc, #420]	@ (800144c <main+0x32c>)
 80012a8:	701a      	strb	r2, [r3, #0]
		SUM = DHT11_Read(); // Check sum
 80012aa:	f7ff fe9b 	bl	8000fe4 <DHT11_Read>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b67      	ldr	r3, [pc, #412]	@ (8001450 <main+0x330>)
 80012b4:	701a      	strb	r2, [r3, #0]
		if (RHI + RHD + TCI + TCD == SUM)
 80012b6:	4b62      	ldr	r3, [pc, #392]	@ (8001440 <main+0x320>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b61      	ldr	r3, [pc, #388]	@ (8001444 <main+0x324>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a61      	ldr	r2, [pc, #388]	@ (8001448 <main+0x328>)
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a60      	ldr	r2, [pc, #384]	@ (800144c <main+0x32c>)
 80012ca:	7812      	ldrb	r2, [r2, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a60      	ldr	r2, [pc, #384]	@ (8001450 <main+0x330>)
 80012d0:	7812      	ldrb	r2, [r2, #0]
 80012d2:	4293      	cmp	r3, r2
 80012d4:	f040 80dd 	bne.w	8001492 <main+0x372>
		{
			// Can use RHI and TCI for any purposes if whole number only needed
			tCelsius = (float)TCI + (float)(TCD/10.0);
 80012d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001448 <main+0x328>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fc2b 	bl	8000b38 <__aeabi_ui2f>
 80012e2:	4604      	mov	r4, r0
 80012e4:	4b59      	ldr	r3, [pc, #356]	@ (800144c <main+0x32c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f883 	bl	80003f4 <__aeabi_i2d>
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b58      	ldr	r3, [pc, #352]	@ (8001454 <main+0x334>)
 80012f4:	f7ff fa12 	bl	800071c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fb14 	bl	800092c <__aeabi_d2f>
 8001304:	4603      	mov	r3, r0
 8001306:	4619      	mov	r1, r3
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff fb65 	bl	80009d8 <__addsf3>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	4b51      	ldr	r3, [pc, #324]	@ (8001458 <main+0x338>)
 8001314:	601a      	str	r2, [r3, #0]
			tFahrenheit = tCelsius * 9/5 + 32;
 8001316:	4b50      	ldr	r3, [pc, #320]	@ (8001458 <main+0x338>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4950      	ldr	r1, [pc, #320]	@ (800145c <main+0x33c>)
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fc63 	bl	8000be8 <__aeabi_fmul>
 8001322:	4603      	mov	r3, r0
 8001324:	494e      	ldr	r1, [pc, #312]	@ (8001460 <main+0x340>)
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fd12 	bl	8000d50 <__aeabi_fdiv>
 800132c:	4603      	mov	r3, r0
 800132e:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fb50 	bl	80009d8 <__addsf3>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b49      	ldr	r3, [pc, #292]	@ (8001464 <main+0x344>)
 800133e:	601a      	str	r2, [r3, #0]
			RH = (float)RHI + (float)(RHD/10.0);
 8001340:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <main+0x320>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fbf7 	bl	8000b38 <__aeabi_ui2f>
 800134a:	4604      	mov	r4, r0
 800134c:	4b3d      	ldr	r3, [pc, #244]	@ (8001444 <main+0x324>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f84f 	bl	80003f4 <__aeabi_i2d>
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b3e      	ldr	r3, [pc, #248]	@ (8001454 <main+0x334>)
 800135c:	f7ff f9de 	bl	800071c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fae0 	bl	800092c <__aeabi_d2f>
 800136c:	4603      	mov	r3, r0
 800136e:	4619      	mov	r1, r3
 8001370:	4620      	mov	r0, r4
 8001372:	f7ff fb31 	bl	80009d8 <__addsf3>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b3b      	ldr	r3, [pc, #236]	@ (8001468 <main+0x348>)
 800137c:	601a      	str	r2, [r3, #0]
			// Can use tCelsius, tFahrenheit and RH for any purposes
			TFI = tFahrenheit;  // Fahrenheit integral
 800137e:	4b39      	ldr	r3, [pc, #228]	@ (8001464 <main+0x344>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fd80 	bl	8000e88 <__aeabi_f2uiz>
 8001388:	4603      	mov	r3, r0
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b37      	ldr	r3, [pc, #220]	@ (800146c <main+0x34c>)
 800138e:	701a      	strb	r2, [r3, #0]
			TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 8001390:	4b34      	ldr	r3, [pc, #208]	@ (8001464 <main+0x344>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4936      	ldr	r1, [pc, #216]	@ (8001470 <main+0x350>)
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fc26 	bl	8000be8 <__aeabi_fmul>
 800139c:	4603      	mov	r3, r0
 800139e:	461c      	mov	r4, r3
 80013a0:	4b32      	ldr	r3, [pc, #200]	@ (800146c <main+0x34c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fbc6 	bl	8000b40 <__aeabi_i2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4619      	mov	r1, r3
 80013b8:	4620      	mov	r0, r4
 80013ba:	f7ff fb0b 	bl	80009d4 <__aeabi_fsub>
 80013be:	4603      	mov	r3, r0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fd61 	bl	8000e88 <__aeabi_f2uiz>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <main+0x354>)
 80013cc:	701a      	strb	r2, [r3, #0]
			sprintf(strCopy,"%d.%d C   ", TCI, TCD);
 80013ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <main+0x328>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <main+0x32c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4927      	ldr	r1, [pc, #156]	@ (8001478 <main+0x358>)
 80013da:	4817      	ldr	r0, [pc, #92]	@ (8001438 <main+0x318>)
 80013dc:	f003 fc92 	bl	8004d04 <siprintf>
			SSD1306_GotoXY (0, 0);
 80013e0:	2100      	movs	r1, #0
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 fc4a 	bl	8001c7c <SSD1306_GotoXY>
			SSD1306_Puts (strCopy, &Font_11x18, 1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	4914      	ldr	r1, [pc, #80]	@ (800143c <main+0x31c>)
 80013ec:	4812      	ldr	r0, [pc, #72]	@ (8001438 <main+0x318>)
 80013ee:	f000 fcd9 	bl	8001da4 <SSD1306_Puts>
			sprintf(strCopy,"%d.%d F   ", TFI, TFD);
 80013f2:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <main+0x34c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <main+0x354>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	491f      	ldr	r1, [pc, #124]	@ (800147c <main+0x35c>)
 80013fe:	480e      	ldr	r0, [pc, #56]	@ (8001438 <main+0x318>)
 8001400:	f003 fc80 	bl	8004d04 <siprintf>
			SSD1306_GotoXY (0, 20);
 8001404:	2114      	movs	r1, #20
 8001406:	2000      	movs	r0, #0
 8001408:	e03a      	b.n	8001480 <main+0x360>
 800140a:	bf00      	nop
 800140c:	f3af 8000 	nop.w
 8001410:	b020c49c 	.word	0xb020c49c
 8001414:	3fa16872 	.word	0x3fa16872
 8001418:	200000d8 	.word	0x200000d8
 800141c:	40010800 	.word	0x40010800
 8001420:	20000120 	.word	0x20000120
 8001424:	200001b0 	.word	0x200001b0
 8001428:	200001b4 	.word	0x200001b4
 800142c:	200001b8 	.word	0x200001b8
 8001430:	200001bc 	.word	0x200001bc
 8001434:	0800567c 	.word	0x0800567c
 8001438:	200001c0 	.word	0x200001c0
 800143c:	20000000 	.word	0x20000000
 8001440:	200001d0 	.word	0x200001d0
 8001444:	200001d1 	.word	0x200001d1
 8001448:	200001d2 	.word	0x200001d2
 800144c:	200001d3 	.word	0x200001d3
 8001450:	200001d4 	.word	0x200001d4
 8001454:	40240000 	.word	0x40240000
 8001458:	200001dc 	.word	0x200001dc
 800145c:	41100000 	.word	0x41100000
 8001460:	40a00000 	.word	0x40a00000
 8001464:	200001e0 	.word	0x200001e0
 8001468:	200001e4 	.word	0x200001e4
 800146c:	200001e8 	.word	0x200001e8
 8001470:	41200000 	.word	0x41200000
 8001474:	200001e9 	.word	0x200001e9
 8001478:	08005688 	.word	0x08005688
 800147c:	08005694 	.word	0x08005694
 8001480:	f000 fbfc 	bl	8001c7c <SSD1306_GotoXY>
			SSD1306_Puts (strCopy, &Font_11x18, 1);
 8001484:	2201      	movs	r2, #1
 8001486:	4946      	ldr	r1, [pc, #280]	@ (80015a0 <main+0x480>)
 8001488:	4846      	ldr	r0, [pc, #280]	@ (80015a4 <main+0x484>)
 800148a:	f000 fc8b 	bl	8001da4 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 800148e:	f000 fb51 	bl	8001b34 <SSD1306_UpdateScreen>
		  }
		if (TCI < 18)
 8001492:	4b45      	ldr	r3, [pc, #276]	@ (80015a8 <main+0x488>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b11      	cmp	r3, #17
 8001498:	d80f      	bhi.n	80014ba <main+0x39a>
		{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800149a:	2201      	movs	r2, #1
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	4843      	ldr	r0, [pc, #268]	@ (80015ac <main+0x48c>)
 80014a0:	f001 f9ed 	bl	800287e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2140      	movs	r1, #64	@ 0x40
 80014a8:	4840      	ldr	r0, [pc, #256]	@ (80015ac <main+0x48c>)
 80014aa:	f001 f9e8 	bl	800287e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2120      	movs	r1, #32
 80014b2:	483e      	ldr	r0, [pc, #248]	@ (80015ac <main+0x48c>)
 80014b4:	f001 f9e3 	bl	800287e <HAL_GPIO_WritePin>
 80014b8:	e022      	b.n	8001500 <main+0x3e0>
		}
		else if (TCI < 28)
 80014ba:	4b3b      	ldr	r3, [pc, #236]	@ (80015a8 <main+0x488>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b1b      	cmp	r3, #27
 80014c0:	d80f      	bhi.n	80014e2 <main+0x3c2>
		{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2180      	movs	r1, #128	@ 0x80
 80014c6:	4839      	ldr	r0, [pc, #228]	@ (80015ac <main+0x48c>)
 80014c8:	f001 f9d9 	bl	800287e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2140      	movs	r1, #64	@ 0x40
 80014d0:	4836      	ldr	r0, [pc, #216]	@ (80015ac <main+0x48c>)
 80014d2:	f001 f9d4 	bl	800287e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2120      	movs	r1, #32
 80014da:	4834      	ldr	r0, [pc, #208]	@ (80015ac <main+0x48c>)
 80014dc:	f001 f9cf 	bl	800287e <HAL_GPIO_WritePin>
 80014e0:	e00e      	b.n	8001500 <main+0x3e0>
		}
		else
		{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2180      	movs	r1, #128	@ 0x80
 80014e6:	4831      	ldr	r0, [pc, #196]	@ (80015ac <main+0x48c>)
 80014e8:	f001 f9c9 	bl	800287e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2140      	movs	r1, #64	@ 0x40
 80014f0:	482e      	ldr	r0, [pc, #184]	@ (80015ac <main+0x48c>)
 80014f2:	f001 f9c4 	bl	800287e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2120      	movs	r1, #32
 80014fa:	482c      	ldr	r0, [pc, #176]	@ (80015ac <main+0x48c>)
 80014fc:	f001 f9bf 	bl	800287e <HAL_GPIO_WritePin>
		}
	  }

	  if (HAL_GPIO_ReadPin(IR_SENSOR_GPIO, IR_SENSOR_PIN) == GPIO_PIN_RESET && door_open == 0)
 8001500:	2101      	movs	r1, #1
 8001502:	482a      	ldr	r0, [pc, #168]	@ (80015ac <main+0x48c>)
 8001504:	f001 f9a4 	bl	8002850 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <main+0x40a>
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10a      	bne.n	800152a <main+0x40a>
	  {
		  door_open = 1;             // Set flag to indicate door is opened
 8001514:	2301      	movs	r3, #1
 8001516:	71fb      	strb	r3, [r7, #7]
		  Servo_Set_Angle(0);        // Open door
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fddf 	bl	80010dc <Servo_Set_Angle>
		  HAL_Delay(120);            // Wait
 800151e:	2078      	movs	r0, #120	@ 0x78
 8001520:	f000 ff0a 	bl	8002338 <HAL_Delay>
		  Servo_Set_Angle(90);
 8001524:	205a      	movs	r0, #90	@ 0x5a
 8001526:	f7ff fdd9 	bl	80010dc <Servo_Set_Angle>
	  }

	  // Check if door has been open long enough and should close
	  if (HAL_GPIO_ReadPin(IR_SENSOR_GPIO, IR_SENSOR_PIN) == GPIO_PIN_SET && door_open == 1)
 800152a:	2101      	movs	r1, #1
 800152c:	481f      	ldr	r0, [pc, #124]	@ (80015ac <main+0x48c>)
 800152e:	f001 f98f 	bl	8002850 <HAL_GPIO_ReadPin>
 8001532:	4603      	mov	r3, r0
 8001534:	2b01      	cmp	r3, #1
 8001536:	d111      	bne.n	800155c <main+0x43c>
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d10e      	bne.n	800155c <main+0x43c>
	  {
		  HAL_Delay(2000);
 800153e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001542:	f000 fef9 	bl	8002338 <HAL_Delay>
		  Servo_Set_Angle(180);      // Open door
 8001546:	20b4      	movs	r0, #180	@ 0xb4
 8001548:	f7ff fdc8 	bl	80010dc <Servo_Set_Angle>
		  HAL_Delay(120);            // Wait
 800154c:	2078      	movs	r0, #120	@ 0x78
 800154e:	f000 fef3 	bl	8002338 <HAL_Delay>
		  Servo_Set_Angle(90);
 8001552:	205a      	movs	r0, #90	@ 0x5a
 8001554:	f7ff fdc2 	bl	80010dc <Servo_Set_Angle>
		  door_open = 0;             // Reset door state
 8001558:	2300      	movs	r3, #0
 800155a:	71fb      	strb	r3, [r7, #7]
	  }

	  buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800155c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001560:	4813      	ldr	r0, [pc, #76]	@ (80015b0 <main+0x490>)
 8001562:	f001 f975 	bl	8002850 <HAL_GPIO_ReadPin>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <main+0x494>)
 800156c:	701a      	strb	r2, [r3, #0]

	  // Detect falling edge (button press)
	  if (buttonState == GPIO_PIN_RESET && lastButtonState == GPIO_PIN_SET)
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <main+0x494>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10c      	bne.n	8001590 <main+0x470>
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <main+0x498>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d108      	bne.n	8001590 <main+0x470>
	  {
		HAL_UART_Transmit(&huart3, &sendData, 1, 100);
 800157e:	2364      	movs	r3, #100	@ 0x64
 8001580:	2201      	movs	r2, #1
 8001582:	490e      	ldr	r1, [pc, #56]	@ (80015bc <main+0x49c>)
 8001584:	480e      	ldr	r0, [pc, #56]	@ (80015c0 <main+0x4a0>)
 8001586:	f003 f9e9 	bl	800495c <HAL_UART_Transmit>
		HAL_Delay(200); // Debounce delay
 800158a:	20c8      	movs	r0, #200	@ 0xc8
 800158c:	f000 fed4 	bl	8002338 <HAL_Delay>
	  }

	  lastButtonState = buttonState;
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <main+0x494>)
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <main+0x498>)
 8001596:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(50);  // Small delay to prevent CPU overload
 8001598:	2032      	movs	r0, #50	@ 0x32
 800159a:	f000 fecd 	bl	8002338 <HAL_Delay>
      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800159e:	e5e5      	b.n	800116c <main+0x4c>
 80015a0:	20000000 	.word	0x20000000
 80015a4:	200001c0 	.word	0x200001c0
 80015a8:	200001d2 	.word	0x200001d2
 80015ac:	40010800 	.word	0x40010800
 80015b0:	40011000 	.word	0x40011000
 80015b4:	200001cf 	.word	0x200001cf
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000009 	.word	0x20000009
 80015c0:	20000168 	.word	0x20000168

080015c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b090      	sub	sp, #64	@ 0x40
 80015c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ca:	f107 0318 	add.w	r3, r7, #24
 80015ce:	2228      	movs	r2, #40	@ 0x28
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 fbb8 	bl	8004d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f4:	2301      	movs	r3, #1
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f8:	2302      	movs	r3, #2
 80015fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001600:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001602:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001608:	f107 0318 	add.w	r3, r7, #24
 800160c:	4618      	mov	r0, r3
 800160e:	f001 ff19 	bl	8003444 <HAL_RCC_OscConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001618:	f000 f9c2 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161c:	230f      	movs	r3, #15
 800161e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001620:	2302      	movs	r3, #2
 8001622:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800162c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2102      	movs	r1, #2
 8001636:	4618      	mov	r0, r3
 8001638:	f002 f986 	bl	8003948 <HAL_RCC_ClockConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001642:	f000 f9ad 	bl	80019a0 <Error_Handler>
  }
}
 8001646:	bf00      	nop
 8001648:	3740      	adds	r7, #64	@ 0x40
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <MX_I2C1_Init+0x50>)
 8001656:	4a13      	ldr	r2, [pc, #76]	@ (80016a4 <MX_I2C1_Init+0x54>)
 8001658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_I2C1_Init+0x50>)
 800165c:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <MX_I2C1_Init+0x58>)
 800165e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_I2C1_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_I2C1_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_I2C1_Init+0x50>)
 800166e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <MX_I2C1_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_I2C1_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <MX_I2C1_Init+0x50>)
 800168e:	f001 f90f 	bl	80028b0 <HAL_I2C_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001698:	f000 f982 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000084 	.word	0x20000084
 80016a4:	40005400 	.word	0x40005400
 80016a8:	00061a80 	.word	0x00061a80

080016ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <MX_TIM1_Init+0x98>)
 80016ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001748 <MX_TIM1_Init+0x9c>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80016ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <MX_TIM1_Init+0x98>)
 80016d0:	2247      	movs	r2, #71	@ 0x47
 80016d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <MX_TIM1_Init+0x98>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_TIM1_Init+0x98>)
 80016dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <MX_TIM1_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016e8:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <MX_TIM1_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <MX_TIM1_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016f4:	4813      	ldr	r0, [pc, #76]	@ (8001744 <MX_TIM1_Init+0x98>)
 80016f6:	f002 fab5 	bl	8003c64 <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001700:	f000 f94e 	bl	80019a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <MX_TIM1_Init+0x98>)
 8001712:	f002 fcfd 	bl	8004110 <HAL_TIM_ConfigClockSource>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800171c:	f000 f940 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	@ (8001744 <MX_TIM1_Init+0x98>)
 800172e:	f003 f867 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001738:	f000 f932 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200000d8 	.word	0x200000d8
 8001748:	40012c00 	.word	0x40012c00

0800174c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08e      	sub	sp, #56	@ 0x38
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800177c:	4b2d      	ldr	r3, [pc, #180]	@ (8001834 <MX_TIM2_Init+0xe8>)
 800177e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001784:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <MX_TIM2_Init+0xe8>)
 8001786:	2247      	movs	r2, #71	@ 0x47
 8001788:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <MX_TIM2_Init+0xe8>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001790:	4b28      	ldr	r3, [pc, #160]	@ (8001834 <MX_TIM2_Init+0xe8>)
 8001792:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001796:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001798:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <MX_TIM2_Init+0xe8>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179e:	4b25      	ldr	r3, [pc, #148]	@ (8001834 <MX_TIM2_Init+0xe8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a4:	4823      	ldr	r0, [pc, #140]	@ (8001834 <MX_TIM2_Init+0xe8>)
 80017a6:	f002 fa5d 	bl	8003c64 <HAL_TIM_Base_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017b0:	f000 f8f6 	bl	80019a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017be:	4619      	mov	r1, r3
 80017c0:	481c      	ldr	r0, [pc, #112]	@ (8001834 <MX_TIM2_Init+0xe8>)
 80017c2:	f002 fca5 	bl	8004110 <HAL_TIM_ConfigClockSource>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017cc:	f000 f8e8 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017d0:	4818      	ldr	r0, [pc, #96]	@ (8001834 <MX_TIM2_Init+0xe8>)
 80017d2:	f002 fae1 	bl	8003d98 <HAL_TIM_PWM_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017dc:	f000 f8e0 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	4619      	mov	r1, r3
 80017ee:	4811      	ldr	r0, [pc, #68]	@ (8001834 <MX_TIM2_Init+0xe8>)
 80017f0:	f003 f806 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80017fa:	f000 f8d1 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fe:	2360      	movs	r3, #96	@ 0x60
 8001800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2204      	movs	r2, #4
 8001812:	4619      	mov	r1, r3
 8001814:	4807      	ldr	r0, [pc, #28]	@ (8001834 <MX_TIM2_Init+0xe8>)
 8001816:	f002 fbb9 	bl	8003f8c <HAL_TIM_PWM_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001820:	f000 f8be 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001824:	4803      	ldr	r0, [pc, #12]	@ (8001834 <MX_TIM2_Init+0xe8>)
 8001826:	f000 fc1b 	bl	8002060 <HAL_TIM_MspPostInit>

}
 800182a:	bf00      	nop
 800182c:	3738      	adds	r7, #56	@ 0x38
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000120 	.word	0x20000120

08001838 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <MX_USART3_UART_Init+0x4c>)
 800183e:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <MX_USART3_UART_Init+0x50>)
 8001840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <MX_USART3_UART_Init+0x4c>)
 8001844:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001848:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <MX_USART3_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <MX_USART3_UART_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001856:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <MX_USART3_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <MX_USART3_UART_Init+0x4c>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <MX_USART3_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <MX_USART3_UART_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800186e:	4805      	ldr	r0, [pc, #20]	@ (8001884 <MX_USART3_UART_Init+0x4c>)
 8001870:	f003 f824 	bl	80048bc <HAL_UART_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800187a:	f000 f891 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000168 	.word	0x20000168
 8001888:	40004800 	.word	0x40004800

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001990 <MX_GPIO_Init+0x104>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a3a      	ldr	r2, [pc, #232]	@ (8001990 <MX_GPIO_Init+0x104>)
 80018a6:	f043 0310 	orr.w	r3, r3, #16
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <MX_GPIO_Init+0x104>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b8:	4b35      	ldr	r3, [pc, #212]	@ (8001990 <MX_GPIO_Init+0x104>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a34      	ldr	r2, [pc, #208]	@ (8001990 <MX_GPIO_Init+0x104>)
 80018be:	f043 0320 	orr.w	r3, r3, #32
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b32      	ldr	r3, [pc, #200]	@ (8001990 <MX_GPIO_Init+0x104>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <MX_GPIO_Init+0x104>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a2e      	ldr	r2, [pc, #184]	@ (8001990 <MX_GPIO_Init+0x104>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001990 <MX_GPIO_Init+0x104>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4b29      	ldr	r3, [pc, #164]	@ (8001990 <MX_GPIO_Init+0x104>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a28      	ldr	r2, [pc, #160]	@ (8001990 <MX_GPIO_Init+0x104>)
 80018ee:	f043 0308 	orr.w	r3, r3, #8
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <MX_GPIO_Init+0x104>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8001906:	4823      	ldr	r0, [pc, #140]	@ (8001994 <MX_GPIO_Init+0x108>)
 8001908:	f000 ffb9 	bl	800287e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001912:	4821      	ldr	r0, [pc, #132]	@ (8001998 <MX_GPIO_Init+0x10c>)
 8001914:	f000 ffb3 	bl	800287e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800191c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001922:	2301      	movs	r3, #1
 8001924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4619      	mov	r1, r3
 800192c:	481b      	ldr	r0, [pc, #108]	@ (800199c <MX_GPIO_Init+0x110>)
 800192e:	f000 fe0b 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8001932:	f240 1301 	movw	r3, #257	@ 0x101
 8001936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	4813      	ldr	r0, [pc, #76]	@ (8001994 <MX_GPIO_Init+0x108>)
 8001948:	f000 fdfe 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800194c:	f44f 7338 	mov.w	r3, #736	@ 0x2e0
 8001950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2302      	movs	r3, #2
 800195c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	4619      	mov	r1, r3
 8001964:	480b      	ldr	r0, [pc, #44]	@ (8001994 <MX_GPIO_Init+0x108>)
 8001966:	f000 fdef 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800196a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800196e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2302      	movs	r3, #2
 800197a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	4619      	mov	r1, r3
 8001982:	4805      	ldr	r0, [pc, #20]	@ (8001998 <MX_GPIO_Init+0x10c>)
 8001984:	f000 fde0 	bl	8002548 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001988:	bf00      	nop
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	40010800 	.word	0x40010800
 8001998:	40010c00 	.word	0x40010c00
 800199c:	40011000 	.word	0x40011000

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <Error_Handler+0x8>

080019ac <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80019b2:	f000 fa1d 	bl	8001df0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80019b6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80019ba:	2201      	movs	r2, #1
 80019bc:	2178      	movs	r1, #120	@ 0x78
 80019be:	485b      	ldr	r0, [pc, #364]	@ (8001b2c <SSD1306_Init+0x180>)
 80019c0:	f001 f9b8 	bl	8002d34 <HAL_I2C_IsDeviceReady>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e0a9      	b.n	8001b22 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80019ce:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80019d2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019d4:	e002      	b.n	80019dc <SSD1306_Init+0x30>
		p--;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3b01      	subs	r3, #1
 80019da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f9      	bne.n	80019d6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80019e2:	22ae      	movs	r2, #174	@ 0xae
 80019e4:	2100      	movs	r1, #0
 80019e6:	2078      	movs	r0, #120	@ 0x78
 80019e8:	f000 fa7c 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80019ec:	2220      	movs	r2, #32
 80019ee:	2100      	movs	r1, #0
 80019f0:	2078      	movs	r0, #120	@ 0x78
 80019f2:	f000 fa77 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80019f6:	2210      	movs	r2, #16
 80019f8:	2100      	movs	r1, #0
 80019fa:	2078      	movs	r0, #120	@ 0x78
 80019fc:	f000 fa72 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a00:	22b0      	movs	r2, #176	@ 0xb0
 8001a02:	2100      	movs	r1, #0
 8001a04:	2078      	movs	r0, #120	@ 0x78
 8001a06:	f000 fa6d 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001a0a:	22c8      	movs	r2, #200	@ 0xc8
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2078      	movs	r0, #120	@ 0x78
 8001a10:	f000 fa68 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2078      	movs	r0, #120	@ 0x78
 8001a1a:	f000 fa63 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001a1e:	2210      	movs	r2, #16
 8001a20:	2100      	movs	r1, #0
 8001a22:	2078      	movs	r0, #120	@ 0x78
 8001a24:	f000 fa5e 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001a28:	2240      	movs	r2, #64	@ 0x40
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2078      	movs	r0, #120	@ 0x78
 8001a2e:	f000 fa59 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001a32:	2281      	movs	r2, #129	@ 0x81
 8001a34:	2100      	movs	r1, #0
 8001a36:	2078      	movs	r0, #120	@ 0x78
 8001a38:	f000 fa54 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001a3c:	22ff      	movs	r2, #255	@ 0xff
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2078      	movs	r0, #120	@ 0x78
 8001a42:	f000 fa4f 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001a46:	22a1      	movs	r2, #161	@ 0xa1
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2078      	movs	r0, #120	@ 0x78
 8001a4c:	f000 fa4a 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001a50:	22a6      	movs	r2, #166	@ 0xa6
 8001a52:	2100      	movs	r1, #0
 8001a54:	2078      	movs	r0, #120	@ 0x78
 8001a56:	f000 fa45 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001a5a:	22a8      	movs	r2, #168	@ 0xa8
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2078      	movs	r0, #120	@ 0x78
 8001a60:	f000 fa40 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001a64:	223f      	movs	r2, #63	@ 0x3f
 8001a66:	2100      	movs	r1, #0
 8001a68:	2078      	movs	r0, #120	@ 0x78
 8001a6a:	f000 fa3b 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a6e:	22a4      	movs	r2, #164	@ 0xa4
 8001a70:	2100      	movs	r1, #0
 8001a72:	2078      	movs	r0, #120	@ 0x78
 8001a74:	f000 fa36 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001a78:	22d3      	movs	r2, #211	@ 0xd3
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2078      	movs	r0, #120	@ 0x78
 8001a7e:	f000 fa31 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2078      	movs	r0, #120	@ 0x78
 8001a88:	f000 fa2c 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a8c:	22d5      	movs	r2, #213	@ 0xd5
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2078      	movs	r0, #120	@ 0x78
 8001a92:	f000 fa27 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001a96:	22f0      	movs	r2, #240	@ 0xf0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2078      	movs	r0, #120	@ 0x78
 8001a9c:	f000 fa22 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001aa0:	22d9      	movs	r2, #217	@ 0xd9
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2078      	movs	r0, #120	@ 0x78
 8001aa6:	f000 fa1d 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001aaa:	2222      	movs	r2, #34	@ 0x22
 8001aac:	2100      	movs	r1, #0
 8001aae:	2078      	movs	r0, #120	@ 0x78
 8001ab0:	f000 fa18 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001ab4:	22da      	movs	r2, #218	@ 0xda
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2078      	movs	r0, #120	@ 0x78
 8001aba:	f000 fa13 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001abe:	2212      	movs	r2, #18
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2078      	movs	r0, #120	@ 0x78
 8001ac4:	f000 fa0e 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001ac8:	22db      	movs	r2, #219	@ 0xdb
 8001aca:	2100      	movs	r1, #0
 8001acc:	2078      	movs	r0, #120	@ 0x78
 8001ace:	f000 fa09 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2078      	movs	r0, #120	@ 0x78
 8001ad8:	f000 fa04 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001adc:	228d      	movs	r2, #141	@ 0x8d
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2078      	movs	r0, #120	@ 0x78
 8001ae2:	f000 f9ff 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001ae6:	2214      	movs	r2, #20
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2078      	movs	r0, #120	@ 0x78
 8001aec:	f000 f9fa 	bl	8001ee4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001af0:	22af      	movs	r2, #175	@ 0xaf
 8001af2:	2100      	movs	r1, #0
 8001af4:	2078      	movs	r0, #120	@ 0x78
 8001af6:	f000 f9f5 	bl	8001ee4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001afa:	222e      	movs	r2, #46	@ 0x2e
 8001afc:	2100      	movs	r1, #0
 8001afe:	2078      	movs	r0, #120	@ 0x78
 8001b00:	f000 f9f0 	bl	8001ee4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 f843 	bl	8001b90 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001b0a:	f000 f813 	bl	8001b34 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <SSD1306_Init+0x184>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <SSD1306_Init+0x184>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001b1a:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <SSD1306_Init+0x184>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000084 	.word	0x20000084
 8001b30:	200005ec 	.word	0x200005ec

08001b34 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	e01d      	b.n	8001b7c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	3b50      	subs	r3, #80	@ 0x50
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2078      	movs	r0, #120	@ 0x78
 8001b4c:	f000 f9ca 	bl	8001ee4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	2078      	movs	r0, #120	@ 0x78
 8001b56:	f000 f9c5 	bl	8001ee4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2078      	movs	r0, #120	@ 0x78
 8001b60:	f000 f9c0 	bl	8001ee4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	01db      	lsls	r3, r3, #7
 8001b68:	4a08      	ldr	r2, [pc, #32]	@ (8001b8c <SSD1306_UpdateScreen+0x58>)
 8001b6a:	441a      	add	r2, r3
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	2140      	movs	r1, #64	@ 0x40
 8001b70:	2078      	movs	r0, #120	@ 0x78
 8001b72:	f000 f951 	bl	8001e18 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	71fb      	strb	r3, [r7, #7]
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2b07      	cmp	r3, #7
 8001b80:	d9de      	bls.n	8001b40 <SSD1306_UpdateScreen+0xc>
	}
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200001ec 	.word	0x200001ec

08001b90 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <SSD1306_Fill+0x14>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <SSD1306_Fill+0x16>
 8001ba4:	23ff      	movs	r3, #255	@ 0xff
 8001ba6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001baa:	4619      	mov	r1, r3
 8001bac:	4803      	ldr	r0, [pc, #12]	@ (8001bbc <SSD1306_Fill+0x2c>)
 8001bae:	f003 f8cb 	bl	8004d48 <memset>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200001ec 	.word	0x200001ec

08001bc0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	80bb      	strh	r3, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	70fb      	strb	r3, [r7, #3]
	if (
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bd6:	d848      	bhi.n	8001c6a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bdc:	d845      	bhi.n	8001c6a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001bde:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <SSD1306_DrawPixel+0xb4>)
 8001be0:	791b      	ldrb	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d11a      	bne.n	8001c30 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001bfa:	88fa      	ldrh	r2, [r7, #6]
 8001bfc:	88bb      	ldrh	r3, [r7, #4]
 8001bfe:	08db      	lsrs	r3, r3, #3
 8001c00:	b298      	uxth	r0, r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	01db      	lsls	r3, r3, #7
 8001c06:	4413      	add	r3, r2
 8001c08:	4a1b      	ldr	r2, [pc, #108]	@ (8001c78 <SSD1306_DrawPixel+0xb8>)
 8001c0a:	5cd3      	ldrb	r3, [r2, r3]
 8001c0c:	b25a      	sxtb	r2, r3
 8001c0e:	88bb      	ldrh	r3, [r7, #4]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	2101      	movs	r1, #1
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	b25b      	sxtb	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b259      	sxtb	r1, r3
 8001c20:	88fa      	ldrh	r2, [r7, #6]
 8001c22:	4603      	mov	r3, r0
 8001c24:	01db      	lsls	r3, r3, #7
 8001c26:	4413      	add	r3, r2
 8001c28:	b2c9      	uxtb	r1, r1
 8001c2a:	4a13      	ldr	r2, [pc, #76]	@ (8001c78 <SSD1306_DrawPixel+0xb8>)
 8001c2c:	54d1      	strb	r1, [r2, r3]
 8001c2e:	e01d      	b.n	8001c6c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	88bb      	ldrh	r3, [r7, #4]
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	b298      	uxth	r0, r3
 8001c38:	4603      	mov	r3, r0
 8001c3a:	01db      	lsls	r3, r3, #7
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c78 <SSD1306_DrawPixel+0xb8>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	b25a      	sxtb	r2, r3
 8001c44:	88bb      	ldrh	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	4013      	ands	r3, r2
 8001c58:	b259      	sxtb	r1, r3
 8001c5a:	88fa      	ldrh	r2, [r7, #6]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	01db      	lsls	r3, r3, #7
 8001c60:	4413      	add	r3, r2
 8001c62:	b2c9      	uxtb	r1, r1
 8001c64:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <SSD1306_DrawPixel+0xb8>)
 8001c66:	54d1      	strb	r1, [r2, r3]
 8001c68:	e000      	b.n	8001c6c <SSD1306_DrawPixel+0xac>
		return;
 8001c6a:	bf00      	nop
	}
}
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	200005ec 	.word	0x200005ec
 8001c78:	200001ec 	.word	0x200001ec

08001c7c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	460a      	mov	r2, r1
 8001c86:	80fb      	strh	r3, [r7, #6]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001c8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <SSD1306_GotoXY+0x28>)
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001c92:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <SSD1306_GotoXY+0x28>)
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	8053      	strh	r3, [r2, #2]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	200005ec 	.word	0x200005ec

08001ca8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001cb8:	4b39      	ldr	r3, [pc, #228]	@ (8001da0 <SSD1306_Putc+0xf8>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
	if (
 8001cc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cc6:	dc07      	bgt.n	8001cd8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001cc8:	4b35      	ldr	r3, [pc, #212]	@ (8001da0 <SSD1306_Putc+0xf8>)
 8001cca:	885b      	ldrh	r3, [r3, #2]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	785b      	ldrb	r3, [r3, #1]
 8001cd2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001cd4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cd6:	dd01      	ble.n	8001cdc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e05d      	b.n	8001d98 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e04b      	b.n	8001d7a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	3b20      	subs	r3, #32
 8001cea:	6839      	ldr	r1, [r7, #0]
 8001cec:	7849      	ldrb	r1, [r1, #1]
 8001cee:	fb01 f303 	mul.w	r3, r1, r3
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	440b      	add	r3, r1
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	e030      	b.n	8001d68 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001d16:	4b22      	ldr	r3, [pc, #136]	@ (8001da0 <SSD1306_Putc+0xf8>)
 8001d18:	881a      	ldrh	r2, [r3, #0]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	b298      	uxth	r0, r3
 8001d22:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <SSD1306_Putc+0xf8>)
 8001d24:	885a      	ldrh	r2, [r3, #2]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	79ba      	ldrb	r2, [r7, #6]
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7ff ff45 	bl	8001bc0 <SSD1306_DrawPixel>
 8001d36:	e014      	b.n	8001d62 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001d38:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <SSD1306_Putc+0xf8>)
 8001d3a:	881a      	ldrh	r2, [r3, #0]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	b298      	uxth	r0, r3
 8001d44:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <SSD1306_Putc+0xf8>)
 8001d46:	885a      	ldrh	r2, [r3, #2]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	79bb      	ldrb	r3, [r7, #6]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf0c      	ite	eq
 8001d56:	2301      	moveq	r3, #1
 8001d58:	2300      	movne	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f7ff ff2f 	bl	8001bc0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	3301      	adds	r3, #1
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d3c8      	bcc.n	8001d06 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d3ad      	bcc.n	8001ce2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <SSD1306_Putc+0xf8>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	7812      	ldrb	r2, [r2, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <SSD1306_Putc+0xf8>)
 8001d94:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001d96:	79fb      	ldrb	r3, [r7, #7]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200005ec 	.word	0x200005ec

08001da4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001db2:	e012      	b.n	8001dda <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	79fa      	ldrb	r2, [r7, #7]
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff73 	bl	8001ca8 <SSD1306_Putc>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d002      	beq.n	8001dd4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	e008      	b.n	8001de6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e8      	bne.n	8001db4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	781b      	ldrb	r3, [r3, #0]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001df6:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <ssd1306_I2C_Init+0x24>)
 8001df8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001dfa:	e002      	b.n	8001e02 <ssd1306_I2C_Init+0x12>
		p--;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f9      	bne.n	8001dfc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	0003d090 	.word	0x0003d090

08001e18 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b0c7      	sub	sp, #284	@ 0x11c
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	4604      	mov	r4, r0
 8001e20:	4608      	mov	r0, r1
 8001e22:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001e26:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001e2a:	600a      	str	r2, [r1, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e32:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001e36:	4622      	mov	r2, r4
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e3e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001e42:	4602      	mov	r2, r0
 8001e44:	701a      	strb	r2, [r3, #0]
 8001e46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e4e:	460a      	mov	r2, r1
 8001e50:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001e52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e5a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e5e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001e6c:	e015      	b.n	8001e9a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001e6e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e72:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e76:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	441a      	add	r2, r3
 8001e7e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e82:	3301      	adds	r3, #1
 8001e84:	7811      	ldrb	r1, [r2, #0]
 8001e86:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e8a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001e8e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001e90:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e94:	3301      	adds	r3, #1
 8001e96:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001e9a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001ea4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001ea8:	8812      	ldrh	r2, [r2, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d8df      	bhi.n	8001e6e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001eae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eb2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b299      	uxth	r1, r3
 8001eba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ebe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	f107 020c 	add.w	r2, r7, #12
 8001ecc:	200a      	movs	r0, #10
 8001ece:	9000      	str	r0, [sp, #0]
 8001ed0:	4803      	ldr	r0, [pc, #12]	@ (8001ee0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001ed2:	f000 fe31 	bl	8002b38 <HAL_I2C_Master_Transmit>
}
 8001ed6:	bf00      	nop
 8001ed8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd90      	pop	{r4, r7, pc}
 8001ee0:	20000084 	.word	0x20000084

08001ee4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	71bb      	strb	r3, [r7, #6]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001efa:	797b      	ldrb	r3, [r7, #5]
 8001efc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	b299      	uxth	r1, r3
 8001f02:	f107 020c 	add.w	r2, r7, #12
 8001f06:	230a      	movs	r3, #10
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	4803      	ldr	r0, [pc, #12]	@ (8001f1c <ssd1306_I2C_Write+0x38>)
 8001f0e:	f000 fe13 	bl	8002b38 <HAL_I2C_Master_Transmit>
}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000084 	.word	0x20000084

08001f20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <HAL_MspInit+0x5c>)
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	4a14      	ldr	r2, [pc, #80]	@ (8001f7c <HAL_MspInit+0x5c>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6193      	str	r3, [r2, #24]
 8001f32:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_MspInit+0x5c>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <HAL_MspInit+0x5c>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4a0e      	ldr	r2, [pc, #56]	@ (8001f7c <HAL_MspInit+0x5c>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f48:	61d3      	str	r3, [r2, #28]
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <HAL_MspInit+0x5c>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_MspInit+0x60>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	4a04      	ldr	r2, [pc, #16]	@ (8001f80 <HAL_MspInit+0x60>)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000

08001f84 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a15      	ldr	r2, [pc, #84]	@ (8001ff4 <HAL_I2C_MspInit+0x70>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d123      	bne.n	8001fec <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <HAL_I2C_MspInit+0x74>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a13      	ldr	r2, [pc, #76]	@ (8001ff8 <HAL_I2C_MspInit+0x74>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <HAL_I2C_MspInit+0x74>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fbc:	23c0      	movs	r3, #192	@ 0xc0
 8001fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc0:	2312      	movs	r3, #18
 8001fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	4619      	mov	r1, r3
 8001fce:	480b      	ldr	r0, [pc, #44]	@ (8001ffc <HAL_I2C_MspInit+0x78>)
 8001fd0:	f000 faba 	bl	8002548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fd4:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <HAL_I2C_MspInit+0x74>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	@ (8001ff8 <HAL_I2C_MspInit+0x74>)
 8001fda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fde:	61d3      	str	r3, [r2, #28]
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <HAL_I2C_MspInit+0x74>)
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40005400 	.word	0x40005400
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40010c00 	.word	0x40010c00

08002000 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <HAL_TIM_Base_MspInit+0x58>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10c      	bne.n	800202c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <HAL_TIM_Base_MspInit+0x5c>)
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	4a11      	ldr	r2, [pc, #68]	@ (800205c <HAL_TIM_Base_MspInit+0x5c>)
 8002018:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800201c:	6193      	str	r3, [r2, #24]
 800201e:	4b0f      	ldr	r3, [pc, #60]	@ (800205c <HAL_TIM_Base_MspInit+0x5c>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800202a:	e010      	b.n	800204e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002034:	d10b      	bne.n	800204e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002036:	4b09      	ldr	r3, [pc, #36]	@ (800205c <HAL_TIM_Base_MspInit+0x5c>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	4a08      	ldr	r2, [pc, #32]	@ (800205c <HAL_TIM_Base_MspInit+0x5c>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	61d3      	str	r3, [r2, #28]
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_TIM_Base_MspInit+0x5c>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40021000 	.word	0x40021000

08002060 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207e:	d117      	bne.n	80020b0 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <HAL_TIM_MspPostInit+0x58>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <HAL_TIM_MspPostInit+0x58>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	6193      	str	r3, [r2, #24]
 800208c:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_TIM_MspPostInit+0x58>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002098:	2302      	movs	r3, #2
 800209a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	4619      	mov	r1, r3
 80020aa:	4804      	ldr	r0, [pc, #16]	@ (80020bc <HAL_TIM_MspPostInit+0x5c>)
 80020ac:	f000 fa4c 	bl	8002548 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020b0:	bf00      	nop
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010800 	.word	0x40010800

080020c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1c      	ldr	r2, [pc, #112]	@ (800214c <HAL_UART_MspInit+0x8c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d131      	bne.n	8002144 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_UART_MspInit+0x90>)
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002150 <HAL_UART_MspInit+0x90>)
 80020e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ea:	61d3      	str	r3, [r2, #28]
 80020ec:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <HAL_UART_MspInit+0x90>)
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f8:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_UART_MspInit+0x90>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <HAL_UART_MspInit+0x90>)
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	6193      	str	r3, [r2, #24]
 8002104:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_UART_MspInit+0x90>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002114:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800211a:	2303      	movs	r3, #3
 800211c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	4619      	mov	r1, r3
 8002124:	480b      	ldr	r0, [pc, #44]	@ (8002154 <HAL_UART_MspInit+0x94>)
 8002126:	f000 fa0f 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800212a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800212e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	4619      	mov	r1, r3
 800213e:	4805      	ldr	r0, [pc, #20]	@ (8002154 <HAL_UART_MspInit+0x94>)
 8002140:	f000 fa02 	bl	8002548 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8002144:	bf00      	nop
 8002146:	3720      	adds	r7, #32
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40004800 	.word	0x40004800
 8002150:	40021000 	.word	0x40021000
 8002154:	40010c00 	.word	0x40010c00

08002158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <NMI_Handler+0x4>

08002160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <MemManage_Handler+0x4>

08002170 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <BusFault_Handler+0x4>

08002178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <UsageFault_Handler+0x4>

08002180 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a8:	f000 f8aa 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4a14      	ldr	r2, [pc, #80]	@ (800220c <_sbrk+0x5c>)
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <_sbrk+0x60>)
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <_sbrk+0x64>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <_sbrk+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d207      	bcs.n	80021f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e0:	f002 fdba 	bl	8004d58 <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021ee:	e009      	b.n	8002204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20005000 	.word	0x20005000
 8002210:	00000400 	.word	0x00000400
 8002214:	200005f4 	.word	0x200005f4
 8002218:	20000748 	.word	0x20000748

0800221c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002228:	f7ff fff8 	bl	800221c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800222c:	480b      	ldr	r0, [pc, #44]	@ (800225c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800222e:	490c      	ldr	r1, [pc, #48]	@ (8002260 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002230:	4a0c      	ldr	r2, [pc, #48]	@ (8002264 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002244:	4c09      	ldr	r4, [pc, #36]	@ (800226c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002252:	f002 fd87 	bl	8004d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002256:	f7fe ff63 	bl	8001120 <main>
  bx lr
 800225a:	4770      	bx	lr
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002264:	08006464 	.word	0x08006464
  ldr r2, =_sbss
 8002268:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800226c:	20000744 	.word	0x20000744

08002270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC1_2_IRQHandler>
	...

08002274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <HAL_Init+0x28>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a07      	ldr	r2, [pc, #28]	@ (800229c <HAL_Init+0x28>)
 800227e:	f043 0310 	orr.w	r3, r3, #16
 8002282:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002284:	2003      	movs	r0, #3
 8002286:	f000 f92b 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800228a:	200f      	movs	r0, #15
 800228c:	f000 f808 	bl	80022a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002290:	f7ff fe46 	bl	8001f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40022000 	.word	0x40022000

080022a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_InitTick+0x54>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <HAL_InitTick+0x58>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f935 	bl	800252e <HAL_SYSTICK_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00e      	b.n	80022ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b0f      	cmp	r3, #15
 80022d2:	d80a      	bhi.n	80022ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d4:	2200      	movs	r2, #0
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022dc:	f000 f90b 	bl	80024f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e0:	4a06      	ldr	r2, [pc, #24]	@ (80022fc <HAL_InitTick+0x5c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	2000000c 	.word	0x2000000c
 80022f8:	20000014 	.word	0x20000014
 80022fc:	20000010 	.word	0x20000010

08002300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_IncTick+0x1c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <HAL_IncTick+0x20>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a03      	ldr	r2, [pc, #12]	@ (8002320 <HAL_IncTick+0x20>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	20000014 	.word	0x20000014
 8002320:	200005f8 	.word	0x200005f8

08002324 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return uwTick;
 8002328:	4b02      	ldr	r3, [pc, #8]	@ (8002334 <HAL_GetTick+0x10>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	200005f8 	.word	0x200005f8

08002338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff fff0 	bl	8002324 <HAL_GetTick>
 8002344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002350:	d005      	beq.n	800235e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002352:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <HAL_Delay+0x44>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800235e:	bf00      	nop
 8002360:	f7ff ffe0 	bl	8002324 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d8f7      	bhi.n	8002360 <HAL_Delay+0x28>
  {
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000014 	.word	0x20000014

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	@ (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	@ (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	@ (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	@ 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00f      	b.n	80024d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <SysTick_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ba:	210f      	movs	r1, #15
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024c0:	f7ff ff90 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <SysTick_Config+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <SysTick_Config+0x40>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff49 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff5e 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff90 	bl	8002438 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5f 	bl	80023e4 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ffb0 	bl	800249c <SysTick_Config>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b08b      	sub	sp, #44	@ 0x2c
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255a:	e169      	b.n	8002830 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800255c:	2201      	movs	r2, #1
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8158 	bne.w	800282a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4a9a      	ldr	r2, [pc, #616]	@ (80027e8 <HAL_GPIO_Init+0x2a0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d05e      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 8002584:	4a98      	ldr	r2, [pc, #608]	@ (80027e8 <HAL_GPIO_Init+0x2a0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d875      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 800258a:	4a98      	ldr	r2, [pc, #608]	@ (80027ec <HAL_GPIO_Init+0x2a4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d058      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 8002590:	4a96      	ldr	r2, [pc, #600]	@ (80027ec <HAL_GPIO_Init+0x2a4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d86f      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 8002596:	4a96      	ldr	r2, [pc, #600]	@ (80027f0 <HAL_GPIO_Init+0x2a8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d052      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 800259c:	4a94      	ldr	r2, [pc, #592]	@ (80027f0 <HAL_GPIO_Init+0x2a8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d869      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 80025a2:	4a94      	ldr	r2, [pc, #592]	@ (80027f4 <HAL_GPIO_Init+0x2ac>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d04c      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 80025a8:	4a92      	ldr	r2, [pc, #584]	@ (80027f4 <HAL_GPIO_Init+0x2ac>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d863      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 80025ae:	4a92      	ldr	r2, [pc, #584]	@ (80027f8 <HAL_GPIO_Init+0x2b0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d046      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 80025b4:	4a90      	ldr	r2, [pc, #576]	@ (80027f8 <HAL_GPIO_Init+0x2b0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d85d      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 80025ba:	2b12      	cmp	r3, #18
 80025bc:	d82a      	bhi.n	8002614 <HAL_GPIO_Init+0xcc>
 80025be:	2b12      	cmp	r3, #18
 80025c0:	d859      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 80025c2:	a201      	add	r2, pc, #4	@ (adr r2, 80025c8 <HAL_GPIO_Init+0x80>)
 80025c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c8:	08002643 	.word	0x08002643
 80025cc:	0800261d 	.word	0x0800261d
 80025d0:	0800262f 	.word	0x0800262f
 80025d4:	08002671 	.word	0x08002671
 80025d8:	08002677 	.word	0x08002677
 80025dc:	08002677 	.word	0x08002677
 80025e0:	08002677 	.word	0x08002677
 80025e4:	08002677 	.word	0x08002677
 80025e8:	08002677 	.word	0x08002677
 80025ec:	08002677 	.word	0x08002677
 80025f0:	08002677 	.word	0x08002677
 80025f4:	08002677 	.word	0x08002677
 80025f8:	08002677 	.word	0x08002677
 80025fc:	08002677 	.word	0x08002677
 8002600:	08002677 	.word	0x08002677
 8002604:	08002677 	.word	0x08002677
 8002608:	08002677 	.word	0x08002677
 800260c:	08002625 	.word	0x08002625
 8002610:	08002639 	.word	0x08002639
 8002614:	4a79      	ldr	r2, [pc, #484]	@ (80027fc <HAL_GPIO_Init+0x2b4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800261a:	e02c      	b.n	8002676 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	623b      	str	r3, [r7, #32]
          break;
 8002622:	e029      	b.n	8002678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	3304      	adds	r3, #4
 800262a:	623b      	str	r3, [r7, #32]
          break;
 800262c:	e024      	b.n	8002678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	3308      	adds	r3, #8
 8002634:	623b      	str	r3, [r7, #32]
          break;
 8002636:	e01f      	b.n	8002678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	330c      	adds	r3, #12
 800263e:	623b      	str	r3, [r7, #32]
          break;
 8002640:	e01a      	b.n	8002678 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800264a:	2304      	movs	r3, #4
 800264c:	623b      	str	r3, [r7, #32]
          break;
 800264e:	e013      	b.n	8002678 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d105      	bne.n	8002664 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002658:	2308      	movs	r3, #8
 800265a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	611a      	str	r2, [r3, #16]
          break;
 8002662:	e009      	b.n	8002678 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002664:	2308      	movs	r3, #8
 8002666:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	615a      	str	r2, [r3, #20]
          break;
 800266e:	e003      	b.n	8002678 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
          break;
 8002674:	e000      	b.n	8002678 <HAL_GPIO_Init+0x130>
          break;
 8002676:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2bff      	cmp	r3, #255	@ 0xff
 800267c:	d801      	bhi.n	8002682 <HAL_GPIO_Init+0x13a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	e001      	b.n	8002686 <HAL_GPIO_Init+0x13e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2bff      	cmp	r3, #255	@ 0xff
 800268c:	d802      	bhi.n	8002694 <HAL_GPIO_Init+0x14c>
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	e002      	b.n	800269a <HAL_GPIO_Init+0x152>
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	3b08      	subs	r3, #8
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	210f      	movs	r1, #15
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	401a      	ands	r2, r3
 80026ac:	6a39      	ldr	r1, [r7, #32]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	431a      	orrs	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80b1 	beq.w	800282a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002800 <HAL_GPIO_Init+0x2b8>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002800 <HAL_GPIO_Init+0x2b8>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6193      	str	r3, [r2, #24]
 80026d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002800 <HAL_GPIO_Init+0x2b8>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026e0:	4a48      	ldr	r2, [pc, #288]	@ (8002804 <HAL_GPIO_Init+0x2bc>)
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a40      	ldr	r2, [pc, #256]	@ (8002808 <HAL_GPIO_Init+0x2c0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d013      	beq.n	8002734 <HAL_GPIO_Init+0x1ec>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3f      	ldr	r2, [pc, #252]	@ (800280c <HAL_GPIO_Init+0x2c4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00d      	beq.n	8002730 <HAL_GPIO_Init+0x1e8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3e      	ldr	r2, [pc, #248]	@ (8002810 <HAL_GPIO_Init+0x2c8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <HAL_GPIO_Init+0x1e4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a3d      	ldr	r2, [pc, #244]	@ (8002814 <HAL_GPIO_Init+0x2cc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_GPIO_Init+0x1e0>
 8002724:	2303      	movs	r3, #3
 8002726:	e006      	b.n	8002736 <HAL_GPIO_Init+0x1ee>
 8002728:	2304      	movs	r3, #4
 800272a:	e004      	b.n	8002736 <HAL_GPIO_Init+0x1ee>
 800272c:	2302      	movs	r3, #2
 800272e:	e002      	b.n	8002736 <HAL_GPIO_Init+0x1ee>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_GPIO_Init+0x1ee>
 8002734:	2300      	movs	r3, #0
 8002736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002738:	f002 0203 	and.w	r2, r2, #3
 800273c:	0092      	lsls	r2, r2, #2
 800273e:	4093      	lsls	r3, r2
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002746:	492f      	ldr	r1, [pc, #188]	@ (8002804 <HAL_GPIO_Init+0x2bc>)
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002760:	4b2d      	ldr	r3, [pc, #180]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	492c      	ldr	r1, [pc, #176]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800276e:	4b2a      	ldr	r3, [pc, #168]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	43db      	mvns	r3, r3
 8002776:	4928      	ldr	r1, [pc, #160]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 8002778:	4013      	ands	r3, r2
 800277a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002788:	4b23      	ldr	r3, [pc, #140]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	4922      	ldr	r1, [pc, #136]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	60cb      	str	r3, [r1, #12]
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002796:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	43db      	mvns	r3, r3
 800279e:	491e      	ldr	r1, [pc, #120]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027b0:	4b19      	ldr	r3, [pc, #100]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4918      	ldr	r1, [pc, #96]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027be:	4b16      	ldr	r3, [pc, #88]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4914      	ldr	r1, [pc, #80]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d021      	beq.n	800281c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	490e      	ldr	r1, [pc, #56]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
 80027e4:	e021      	b.n	800282a <HAL_GPIO_Init+0x2e2>
 80027e6:	bf00      	nop
 80027e8:	10320000 	.word	0x10320000
 80027ec:	10310000 	.word	0x10310000
 80027f0:	10220000 	.word	0x10220000
 80027f4:	10210000 	.word	0x10210000
 80027f8:	10120000 	.word	0x10120000
 80027fc:	10110000 	.word	0x10110000
 8002800:	40021000 	.word	0x40021000
 8002804:	40010000 	.word	0x40010000
 8002808:	40010800 	.word	0x40010800
 800280c:	40010c00 	.word	0x40010c00
 8002810:	40011000 	.word	0x40011000
 8002814:	40011400 	.word	0x40011400
 8002818:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_GPIO_Init+0x304>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	43db      	mvns	r3, r3
 8002824:	4909      	ldr	r1, [pc, #36]	@ (800284c <HAL_GPIO_Init+0x304>)
 8002826:	4013      	ands	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	3301      	adds	r3, #1
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	fa22 f303 	lsr.w	r3, r2, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	f47f ae8e 	bne.w	800255c <HAL_GPIO_Init+0x14>
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	372c      	adds	r7, #44	@ 0x2c
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	40010400 	.word	0x40010400

08002850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	887b      	ldrh	r3, [r7, #2]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	e001      	b.n	8002872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	807b      	strh	r3, [r7, #2]
 800288a:	4613      	mov	r3, r2
 800288c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800288e:	787b      	ldrb	r3, [r7, #1]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002894:	887a      	ldrh	r2, [r7, #2]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800289a:	e003      	b.n	80028a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	041a      	lsls	r2, r3, #16
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	611a      	str	r2, [r3, #16]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e12b      	b.n	8002b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fb54 	bl	8001f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2224      	movs	r2, #36	@ 0x24
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002914:	f001 f960 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 8002918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4a81      	ldr	r2, [pc, #516]	@ (8002b24 <HAL_I2C_Init+0x274>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d807      	bhi.n	8002934 <HAL_I2C_Init+0x84>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4a80      	ldr	r2, [pc, #512]	@ (8002b28 <HAL_I2C_Init+0x278>)
 8002928:	4293      	cmp	r3, r2
 800292a:	bf94      	ite	ls
 800292c:	2301      	movls	r3, #1
 800292e:	2300      	movhi	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e006      	b.n	8002942 <HAL_I2C_Init+0x92>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a7d      	ldr	r2, [pc, #500]	@ (8002b2c <HAL_I2C_Init+0x27c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	bf94      	ite	ls
 800293c:	2301      	movls	r3, #1
 800293e:	2300      	movhi	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0e7      	b.n	8002b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4a78      	ldr	r2, [pc, #480]	@ (8002b30 <HAL_I2C_Init+0x280>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a6a      	ldr	r2, [pc, #424]	@ (8002b24 <HAL_I2C_Init+0x274>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d802      	bhi.n	8002984 <HAL_I2C_Init+0xd4>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3301      	adds	r3, #1
 8002982:	e009      	b.n	8002998 <HAL_I2C_Init+0xe8>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	4a69      	ldr	r2, [pc, #420]	@ (8002b34 <HAL_I2C_Init+0x284>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	3301      	adds	r3, #1
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	430b      	orrs	r3, r1
 800299e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	495c      	ldr	r1, [pc, #368]	@ (8002b24 <HAL_I2C_Init+0x274>)
 80029b4:	428b      	cmp	r3, r1
 80029b6:	d819      	bhi.n	80029ec <HAL_I2C_Init+0x13c>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1e59      	subs	r1, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c6:	1c59      	adds	r1, r3, #1
 80029c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029cc:	400b      	ands	r3, r1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_I2C_Init+0x138>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1e59      	subs	r1, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e6:	e051      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 80029e8:	2304      	movs	r3, #4
 80029ea:	e04f      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d111      	bne.n	8002a18 <HAL_I2C_Init+0x168>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	440b      	add	r3, r1
 8002a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	e012      	b.n	8002a3e <HAL_I2C_Init+0x18e>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e58      	subs	r0, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	0099      	lsls	r1, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_I2C_Init+0x196>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e022      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10e      	bne.n	8002a6c <HAL_I2C_Init+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1e58      	subs	r0, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	440b      	add	r3, r1
 8002a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a6a:	e00f      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e58      	subs	r0, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	0099      	lsls	r1, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	6809      	ldr	r1, [r1, #0]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002aba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6911      	ldr	r1, [r2, #16]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68d2      	ldr	r2, [r2, #12]
 8002ac6:	4311      	orrs	r1, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	000186a0 	.word	0x000186a0
 8002b28:	001e847f 	.word	0x001e847f
 8002b2c:	003d08ff 	.word	0x003d08ff
 8002b30:	431bde83 	.word	0x431bde83
 8002b34:	10624dd3 	.word	0x10624dd3

08002b38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	461a      	mov	r2, r3
 8002b44:	460b      	mov	r3, r1
 8002b46:	817b      	strh	r3, [r7, #10]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7ff fbea 	bl	8002324 <HAL_GetTick>
 8002b50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	f040 80e0 	bne.w	8002d20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2319      	movs	r3, #25
 8002b66:	2201      	movs	r2, #1
 8002b68:	4970      	ldr	r1, [pc, #448]	@ (8002d2c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fa92 	bl	8003094 <I2C_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b76:	2302      	movs	r3, #2
 8002b78:	e0d3      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_I2C_Master_Transmit+0x50>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e0cc      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d007      	beq.n	8002bae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2221      	movs	r2, #33	@ 0x21
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2210      	movs	r2, #16
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	893a      	ldrh	r2, [r7, #8]
 8002bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4a50      	ldr	r2, [pc, #320]	@ (8002d30 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bf0:	8979      	ldrh	r1, [r7, #10]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f9ca 	bl	8002f90 <I2C_MasterRequestWrite>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e08d      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c1c:	e066      	b.n	8002cec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	6a39      	ldr	r1, [r7, #32]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fb50 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d107      	bne.n	8002c46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06b      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d11b      	bne.n	8002cc0 <HAL_I2C_Master_Transmit+0x188>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d017      	beq.n	8002cc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	6a39      	ldr	r1, [r7, #32]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fb47 	bl	8003358 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d107      	bne.n	8002ce8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e01a      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d194      	bne.n	8002c1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	00100002 	.word	0x00100002
 8002d30:	ffff0000 	.word	0xffff0000

08002d34 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	@ 0x28
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	460b      	mov	r3, r1
 8002d42:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d44:	f7ff faee 	bl	8002324 <HAL_GetTick>
 8002d48:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	f040 8111 	bne.w	8002f7e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2319      	movs	r3, #25
 8002d62:	2201      	movs	r2, #1
 8002d64:	4988      	ldr	r1, [pc, #544]	@ (8002f88 <HAL_I2C_IsDeviceReady+0x254>)
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f994 	bl	8003094 <I2C_WaitOnFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
 8002d74:	e104      	b.n	8002f80 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2C_IsDeviceReady+0x50>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e0fd      	b.n	8002f80 <HAL_I2C_IsDeviceReady+0x24c>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d007      	beq.n	8002daa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0201 	orr.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002db8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2224      	movs	r2, #36	@ 0x24
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a70      	ldr	r2, [pc, #448]	@ (8002f8c <HAL_I2C_IsDeviceReady+0x258>)
 8002dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ddc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f952 	bl	8003094 <I2C_WaitOnFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00d      	beq.n	8002e12 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e04:	d103      	bne.n	8002e0e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e0c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e0b6      	b.n	8002f80 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e20:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e22:	f7ff fa7f 	bl	8002324 <HAL_GetTick>
 8002e26:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e56:	e025      	b.n	8002ea4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e58:	f7ff fa64 	bl	8002324 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d302      	bcc.n	8002e6e <HAL_I2C_IsDeviceReady+0x13a>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	22a0      	movs	r2, #160	@ 0xa0
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2ba0      	cmp	r3, #160	@ 0xa0
 8002eae:	d005      	beq.n	8002ebc <HAL_I2C_IsDeviceReady+0x188>
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <HAL_I2C_IsDeviceReady+0x188>
 8002eb6:	7dbb      	ldrb	r3, [r7, #22]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0cd      	beq.n	8002e58 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d129      	bne.n	8002f26 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2319      	movs	r3, #25
 8002efe:	2201      	movs	r2, #1
 8002f00:	4921      	ldr	r1, [pc, #132]	@ (8002f88 <HAL_I2C_IsDeviceReady+0x254>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f8c6 	bl	8003094 <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e036      	b.n	8002f80 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e02c      	b.n	8002f80 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f34:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f3e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	2319      	movs	r3, #25
 8002f46:	2201      	movs	r2, #1
 8002f48:	490f      	ldr	r1, [pc, #60]	@ (8002f88 <HAL_I2C_IsDeviceReady+0x254>)
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f8a2 	bl	8003094 <I2C_WaitOnFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e012      	b.n	8002f80 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f4ff af32 	bcc.w	8002dce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	00100002 	.word	0x00100002
 8002f8c:	ffff0000 	.word	0xffff0000

08002f90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d006      	beq.n	8002fba <I2C_MasterRequestWrite+0x2a>
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d003      	beq.n	8002fba <I2C_MasterRequestWrite+0x2a>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fb8:	d108      	bne.n	8002fcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e00b      	b.n	8002fe4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd0:	2b12      	cmp	r3, #18
 8002fd2:	d107      	bne.n	8002fe4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f84f 	bl	8003094 <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800300a:	d103      	bne.n	8003014 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e035      	b.n	8003084 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003020:	d108      	bne.n	8003034 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003022:	897b      	ldrh	r3, [r7, #10]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003030:	611a      	str	r2, [r3, #16]
 8003032:	e01b      	b.n	800306c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003034:	897b      	ldrh	r3, [r7, #10]
 8003036:	11db      	asrs	r3, r3, #7
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f003 0306 	and.w	r3, r3, #6
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f063 030f 	orn	r3, r3, #15
 8003044:	b2da      	uxtb	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	490e      	ldr	r1, [pc, #56]	@ (800308c <I2C_MasterRequestWrite+0xfc>)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f898 	bl	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e010      	b.n	8003084 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003062:	897b      	ldrh	r3, [r7, #10]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4907      	ldr	r1, [pc, #28]	@ (8003090 <I2C_MasterRequestWrite+0x100>)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f888 	bl	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	00010008 	.word	0x00010008
 8003090:	00010002 	.word	0x00010002

08003094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a4:	e048      	b.n	8003138 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030ac:	d044      	beq.n	8003138 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ae:	f7ff f939 	bl	8002324 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d302      	bcc.n	80030c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d139      	bne.n	8003138 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	0c1b      	lsrs	r3, r3, #16
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d10d      	bne.n	80030ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	43da      	mvns	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	4013      	ands	r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	e00c      	b.n	8003104 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	43da      	mvns	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4013      	ands	r3, r2
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	429a      	cmp	r2, r3
 8003108:	d116      	bne.n	8003138 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e023      	b.n	8003180 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	0c1b      	lsrs	r3, r3, #16
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d10d      	bne.n	800315e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	43da      	mvns	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4013      	ands	r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	e00c      	b.n	8003178 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	43da      	mvns	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4013      	ands	r3, r2
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	429a      	cmp	r2, r3
 800317c:	d093      	beq.n	80030a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003196:	e071      	b.n	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a6:	d123      	bne.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	f043 0204 	orr.w	r2, r3, #4
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e067      	b.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031f6:	d041      	beq.n	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f8:	f7ff f894 	bl	8002324 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d302      	bcc.n	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d136      	bne.n	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d10c      	bne.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4013      	ands	r3, r2
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	bf14      	ite	ne
 800322a:	2301      	movne	r3, #1
 800322c:	2300      	moveq	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	e00b      	b.n	800324a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	43da      	mvns	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4013      	ands	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e021      	b.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	0c1b      	lsrs	r3, r3, #16
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d10c      	bne.n	80032a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	43da      	mvns	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4013      	ands	r3, r2
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf14      	ite	ne
 8003298:	2301      	movne	r3, #1
 800329a:	2300      	moveq	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e00b      	b.n	80032b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	43da      	mvns	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4013      	ands	r3, r2
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	bf14      	ite	ne
 80032b2:	2301      	movne	r3, #1
 80032b4:	2300      	moveq	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f47f af6d 	bne.w	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d4:	e034      	b.n	8003340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f886 	bl	80033e8 <I2C_IsAcknowledgeFailed>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e034      	b.n	8003350 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032ec:	d028      	beq.n	8003340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7ff f819 	bl	8002324 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d11d      	bne.n	8003340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330e:	2b80      	cmp	r3, #128	@ 0x80
 8003310:	d016      	beq.n	8003340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	f043 0220 	orr.w	r2, r3, #32
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e007      	b.n	8003350 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334a:	2b80      	cmp	r3, #128	@ 0x80
 800334c:	d1c3      	bne.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003364:	e034      	b.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f83e 	bl	80033e8 <I2C_IsAcknowledgeFailed>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e034      	b.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800337c:	d028      	beq.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7fe ffd1 	bl	8002324 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d11d      	bne.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d016      	beq.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e007      	b.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d1c3      	bne.n	8003366 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033fe:	d11b      	bne.n	8003438 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003408:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	f043 0204 	orr.w	r2, r3, #4
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e272      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 8087 	beq.w	8003572 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003464:	4b92      	ldr	r3, [pc, #584]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b04      	cmp	r3, #4
 800346e:	d00c      	beq.n	800348a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003470:	4b8f      	ldr	r3, [pc, #572]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b08      	cmp	r3, #8
 800347a:	d112      	bne.n	80034a2 <HAL_RCC_OscConfig+0x5e>
 800347c:	4b8c      	ldr	r3, [pc, #560]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003488:	d10b      	bne.n	80034a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348a:	4b89      	ldr	r3, [pc, #548]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d06c      	beq.n	8003570 <HAL_RCC_OscConfig+0x12c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d168      	bne.n	8003570 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e24c      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034aa:	d106      	bne.n	80034ba <HAL_RCC_OscConfig+0x76>
 80034ac:	4b80      	ldr	r3, [pc, #512]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a7f      	ldr	r2, [pc, #508]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80034b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	e02e      	b.n	8003518 <HAL_RCC_OscConfig+0xd4>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10c      	bne.n	80034dc <HAL_RCC_OscConfig+0x98>
 80034c2:	4b7b      	ldr	r3, [pc, #492]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a7a      	ldr	r2, [pc, #488]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b78      	ldr	r3, [pc, #480]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a77      	ldr	r2, [pc, #476]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e01d      	b.n	8003518 <HAL_RCC_OscConfig+0xd4>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0xbc>
 80034e6:	4b72      	ldr	r3, [pc, #456]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a71      	ldr	r2, [pc, #452]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b6f      	ldr	r3, [pc, #444]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a6e      	ldr	r2, [pc, #440]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0xd4>
 8003500:	4b6b      	ldr	r3, [pc, #428]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a6a      	ldr	r2, [pc, #424]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 8003506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4b68      	ldr	r3, [pc, #416]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a67      	ldr	r2, [pc, #412]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 8003512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003516:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d013      	beq.n	8003548 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe ff00 	bl	8002324 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003528:	f7fe fefc 	bl	8002324 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	@ 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e200      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b5d      	ldr	r3, [pc, #372]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0xe4>
 8003546:	e014      	b.n	8003572 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe feec 	bl	8002324 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003550:	f7fe fee8 	bl	8002324 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	@ 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e1ec      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	4b53      	ldr	r3, [pc, #332]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x10c>
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d063      	beq.n	8003646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800357e:	4b4c      	ldr	r3, [pc, #304]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800358a:	4b49      	ldr	r3, [pc, #292]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b08      	cmp	r3, #8
 8003594:	d11c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x18c>
 8003596:	4b46      	ldr	r3, [pc, #280]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a2:	4b43      	ldr	r3, [pc, #268]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_RCC_OscConfig+0x176>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e1c0      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ba:	4b3d      	ldr	r3, [pc, #244]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4939      	ldr	r1, [pc, #228]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	e03a      	b.n	8003646 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d8:	4b36      	ldr	r3, [pc, #216]	@ (80036b4 <HAL_RCC_OscConfig+0x270>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fe fea1 	bl	8002324 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e6:	f7fe fe9d 	bl	8002324 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1a1      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f8:	4b2d      	ldr	r3, [pc, #180]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003604:	4b2a      	ldr	r3, [pc, #168]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4927      	ldr	r1, [pc, #156]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
 8003618:	e015      	b.n	8003646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361a:	4b26      	ldr	r3, [pc, #152]	@ (80036b4 <HAL_RCC_OscConfig+0x270>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe fe80 	bl	8002324 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003628:	f7fe fe7c 	bl	8002324 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e180      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363a:	4b1d      	ldr	r3, [pc, #116]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d03a      	beq.n	80036c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d019      	beq.n	800368e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365a:	4b17      	ldr	r3, [pc, #92]	@ (80036b8 <HAL_RCC_OscConfig+0x274>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003660:	f7fe fe60 	bl	8002324 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003668:	f7fe fe5c 	bl	8002324 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e160      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367a:	4b0d      	ldr	r3, [pc, #52]	@ (80036b0 <HAL_RCC_OscConfig+0x26c>)
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003686:	2001      	movs	r0, #1
 8003688:	f000 face 	bl	8003c28 <RCC_Delay>
 800368c:	e01c      	b.n	80036c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800368e:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <HAL_RCC_OscConfig+0x274>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003694:	f7fe fe46 	bl	8002324 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369a:	e00f      	b.n	80036bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369c:	f7fe fe42 	bl	8002324 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d908      	bls.n	80036bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e146      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000
 80036b4:	42420000 	.word	0x42420000
 80036b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036bc:	4b92      	ldr	r3, [pc, #584]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e9      	bne.n	800369c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80a6 	beq.w	8003822 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d6:	2300      	movs	r3, #0
 80036d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036da:	4b8b      	ldr	r3, [pc, #556]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10d      	bne.n	8003702 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	4b88      	ldr	r3, [pc, #544]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4a87      	ldr	r2, [pc, #540]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 80036ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036f0:	61d3      	str	r3, [r2, #28]
 80036f2:	4b85      	ldr	r3, [pc, #532]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fe:	2301      	movs	r3, #1
 8003700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	4b82      	ldr	r3, [pc, #520]	@ (800390c <HAL_RCC_OscConfig+0x4c8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d118      	bne.n	8003740 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370e:	4b7f      	ldr	r3, [pc, #508]	@ (800390c <HAL_RCC_OscConfig+0x4c8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a7e      	ldr	r2, [pc, #504]	@ (800390c <HAL_RCC_OscConfig+0x4c8>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371a:	f7fe fe03 	bl	8002324 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003722:	f7fe fdff 	bl	8002324 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b64      	cmp	r3, #100	@ 0x64
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e103      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	4b75      	ldr	r3, [pc, #468]	@ (800390c <HAL_RCC_OscConfig+0x4c8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d106      	bne.n	8003756 <HAL_RCC_OscConfig+0x312>
 8003748:	4b6f      	ldr	r3, [pc, #444]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4a6e      	ldr	r2, [pc, #440]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6213      	str	r3, [r2, #32]
 8003754:	e02d      	b.n	80037b2 <HAL_RCC_OscConfig+0x36e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x334>
 800375e:	4b6a      	ldr	r3, [pc, #424]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4a69      	ldr	r2, [pc, #420]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	6213      	str	r3, [r2, #32]
 800376a:	4b67      	ldr	r3, [pc, #412]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	4a66      	ldr	r2, [pc, #408]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 8003770:	f023 0304 	bic.w	r3, r3, #4
 8003774:	6213      	str	r3, [r2, #32]
 8003776:	e01c      	b.n	80037b2 <HAL_RCC_OscConfig+0x36e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b05      	cmp	r3, #5
 800377e:	d10c      	bne.n	800379a <HAL_RCC_OscConfig+0x356>
 8003780:	4b61      	ldr	r3, [pc, #388]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	4a60      	ldr	r2, [pc, #384]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 8003786:	f043 0304 	orr.w	r3, r3, #4
 800378a:	6213      	str	r3, [r2, #32]
 800378c:	4b5e      	ldr	r3, [pc, #376]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	4a5d      	ldr	r2, [pc, #372]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	6213      	str	r3, [r2, #32]
 8003798:	e00b      	b.n	80037b2 <HAL_RCC_OscConfig+0x36e>
 800379a:	4b5b      	ldr	r3, [pc, #364]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	4a5a      	ldr	r2, [pc, #360]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	6213      	str	r3, [r2, #32]
 80037a6:	4b58      	ldr	r3, [pc, #352]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	4a57      	ldr	r2, [pc, #348]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	f023 0304 	bic.w	r3, r3, #4
 80037b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d015      	beq.n	80037e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ba:	f7fe fdb3 	bl	8002324 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f7fe fdaf 	bl	8002324 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0b1      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ee      	beq.n	80037c2 <HAL_RCC_OscConfig+0x37e>
 80037e4:	e014      	b.n	8003810 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e6:	f7fe fd9d 	bl	8002324 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ec:	e00a      	b.n	8003804 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ee:	f7fe fd99 	bl	8002324 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e09b      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003804:	4b40      	ldr	r3, [pc, #256]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1ee      	bne.n	80037ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d105      	bne.n	8003822 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003816:	4b3c      	ldr	r3, [pc, #240]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	4a3b      	ldr	r2, [pc, #236]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003820:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8087 	beq.w	800393a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800382c:	4b36      	ldr	r3, [pc, #216]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b08      	cmp	r3, #8
 8003836:	d061      	beq.n	80038fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d146      	bne.n	80038ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003840:	4b33      	ldr	r3, [pc, #204]	@ (8003910 <HAL_RCC_OscConfig+0x4cc>)
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003846:	f7fe fd6d 	bl	8002324 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384e:	f7fe fd69 	bl	8002324 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e06d      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003860:	4b29      	ldr	r3, [pc, #164]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f0      	bne.n	800384e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003874:	d108      	bne.n	8003888 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003876:	4b24      	ldr	r3, [pc, #144]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4921      	ldr	r1, [pc, #132]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003888:	4b1f      	ldr	r3, [pc, #124]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a19      	ldr	r1, [r3, #32]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	430b      	orrs	r3, r1
 800389a:	491b      	ldr	r1, [pc, #108]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003910 <HAL_RCC_OscConfig+0x4cc>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fe fd3d 	bl	8002324 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fe fd39 	bl	8002324 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e03d      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038c0:	4b11      	ldr	r3, [pc, #68]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x46a>
 80038cc:	e035      	b.n	800393a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <HAL_RCC_OscConfig+0x4cc>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fe fd26 	bl	8002324 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe fd22 	bl	8002324 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e026      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x498>
 80038fa:	e01e      	b.n	800393a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e019      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
 8003908:	40021000 	.word	0x40021000
 800390c:	40007000 	.word	0x40007000
 8003910:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003914:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <HAL_RCC_OscConfig+0x500>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	429a      	cmp	r2, r3
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d001      	beq.n	800393a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000

08003948 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0d0      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800395c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d910      	bls.n	800398c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b67      	ldr	r3, [pc, #412]	@ (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 0207 	bic.w	r2, r3, #7
 8003972:	4965      	ldr	r1, [pc, #404]	@ (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b63      	ldr	r3, [pc, #396]	@ (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0b8      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d020      	beq.n	80039da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039a4:	4b59      	ldr	r3, [pc, #356]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4a58      	ldr	r2, [pc, #352]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039bc:	4b53      	ldr	r3, [pc, #332]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a52      	ldr	r2, [pc, #328]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80039c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c8:	4b50      	ldr	r3, [pc, #320]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	494d      	ldr	r1, [pc, #308]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d040      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d107      	bne.n	80039fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ee:	4b47      	ldr	r3, [pc, #284]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d115      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e07f      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d107      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a06:	4b41      	ldr	r3, [pc, #260]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e073      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a16:	4b3d      	ldr	r3, [pc, #244]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e06b      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a26:	4b39      	ldr	r3, [pc, #228]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f023 0203 	bic.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	4936      	ldr	r1, [pc, #216]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a38:	f7fe fc74 	bl	8002324 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a40:	f7fe fc70 	bl	8002324 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e053      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	4b2d      	ldr	r3, [pc, #180]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 020c 	and.w	r2, r3, #12
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d1eb      	bne.n	8003a40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a68:	4b27      	ldr	r3, [pc, #156]	@ (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d210      	bcs.n	8003a98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b24      	ldr	r3, [pc, #144]	@ (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 0207 	bic.w	r2, r3, #7
 8003a7e:	4922      	ldr	r1, [pc, #136]	@ (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b20      	ldr	r3, [pc, #128]	@ (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e032      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa4:	4b19      	ldr	r3, [pc, #100]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4916      	ldr	r1, [pc, #88]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ac2:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	490e      	ldr	r1, [pc, #56]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ad6:	f000 f821 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8003ada:	4602      	mov	r2, r0
 8003adc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	490a      	ldr	r1, [pc, #40]	@ (8003b10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae8:	5ccb      	ldrb	r3, [r1, r3]
 8003aea:	fa22 f303 	lsr.w	r3, r2, r3
 8003aee:	4a09      	ldr	r2, [pc, #36]	@ (8003b14 <HAL_RCC_ClockConfig+0x1cc>)
 8003af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003af2:	4b09      	ldr	r3, [pc, #36]	@ (8003b18 <HAL_RCC_ClockConfig+0x1d0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe fbd2 	bl	80022a0 <HAL_InitTick>

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40022000 	.word	0x40022000
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	080063fc 	.word	0x080063fc
 8003b14:	2000000c 	.word	0x2000000c
 8003b18:	20000010 	.word	0x20000010

08003b1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	2300      	movs	r3, #0
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b36:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d002      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0x30>
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d003      	beq.n	8003b52 <HAL_RCC_GetSysClockFreq+0x36>
 8003b4a:	e027      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b4c:	4b19      	ldr	r3, [pc, #100]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b4e:	613b      	str	r3, [r7, #16]
      break;
 8003b50:	e027      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	0c9b      	lsrs	r3, r3, #18
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	4a17      	ldr	r2, [pc, #92]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b5c:	5cd3      	ldrb	r3, [r2, r3]
 8003b5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d010      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b6a:	4b11      	ldr	r3, [pc, #68]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	0c5b      	lsrs	r3, r3, #17
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	4a11      	ldr	r2, [pc, #68]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b76:	5cd3      	ldrb	r3, [r2, r3]
 8003b78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b7e:	fb03 f202 	mul.w	r2, r3, r2
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	e004      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b90:	fb02 f303 	mul.w	r3, r2, r3
 8003b94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	613b      	str	r3, [r7, #16]
      break;
 8003b9a:	e002      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b9e:	613b      	str	r3, [r7, #16]
      break;
 8003ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba2:	693b      	ldr	r3, [r7, #16]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	007a1200 	.word	0x007a1200
 8003bb8:	08006414 	.word	0x08006414
 8003bbc:	08006424 	.word	0x08006424
 8003bc0:	003d0900 	.word	0x003d0900

08003bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc8:	4b02      	ldr	r3, [pc, #8]	@ (8003bd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	2000000c 	.word	0x2000000c

08003bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bdc:	f7ff fff2 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	@ (8003bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	@ (8003bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	0800640c 	.word	0x0800640c

08003c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c04:	f7ff ffde 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	0adb      	lsrs	r3, r3, #11
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4903      	ldr	r1, [pc, #12]	@ (8003c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	0800640c 	.word	0x0800640c

08003c28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c30:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <RCC_Delay+0x34>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a0a      	ldr	r2, [pc, #40]	@ (8003c60 <RCC_Delay+0x38>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	0a5b      	lsrs	r3, r3, #9
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	fb02 f303 	mul.w	r3, r2, r3
 8003c42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c44:	bf00      	nop
  }
  while (Delay --);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1e5a      	subs	r2, r3, #1
 8003c4a:	60fa      	str	r2, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f9      	bne.n	8003c44 <RCC_Delay+0x1c>
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	2000000c 	.word	0x2000000c
 8003c60:	10624dd3 	.word	0x10624dd3

08003c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e041      	b.n	8003cfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fe f9b8 	bl	8002000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	f000 fafc 	bl	80042a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d001      	beq.n	8003d1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e032      	b.n	8003d82 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a18      	ldr	r2, [pc, #96]	@ (8003d8c <HAL_TIM_Base_Start+0x88>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00e      	beq.n	8003d4c <HAL_TIM_Base_Start+0x48>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d36:	d009      	beq.n	8003d4c <HAL_TIM_Base_Start+0x48>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a14      	ldr	r2, [pc, #80]	@ (8003d90 <HAL_TIM_Base_Start+0x8c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_TIM_Base_Start+0x48>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a13      	ldr	r2, [pc, #76]	@ (8003d94 <HAL_TIM_Base_Start+0x90>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d111      	bne.n	8003d70 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b06      	cmp	r3, #6
 8003d5c:	d010      	beq.n	8003d80 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	e007      	b.n	8003d80 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40000800 	.word	0x40000800

08003d98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e041      	b.n	8003e2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f839 	bl	8003e36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	f000 fa62 	bl	80042a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d109      	bne.n	8003e6c <HAL_TIM_PWM_Start+0x24>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e022      	b.n	8003eb2 <HAL_TIM_PWM_Start+0x6a>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d109      	bne.n	8003e86 <HAL_TIM_PWM_Start+0x3e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	bf14      	ite	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	2300      	moveq	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	e015      	b.n	8003eb2 <HAL_TIM_PWM_Start+0x6a>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d109      	bne.n	8003ea0 <HAL_TIM_PWM_Start+0x58>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e008      	b.n	8003eb2 <HAL_TIM_PWM_Start+0x6a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e05e      	b.n	8003f78 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d104      	bne.n	8003eca <HAL_TIM_PWM_Start+0x82>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ec8:	e013      	b.n	8003ef2 <HAL_TIM_PWM_Start+0xaa>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d104      	bne.n	8003eda <HAL_TIM_PWM_Start+0x92>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ed8:	e00b      	b.n	8003ef2 <HAL_TIM_PWM_Start+0xaa>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d104      	bne.n	8003eea <HAL_TIM_PWM_Start+0xa2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ee8:	e003      	b.n	8003ef2 <HAL_TIM_PWM_Start+0xaa>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	6839      	ldr	r1, [r7, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fc5c 	bl	80047b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1e      	ldr	r2, [pc, #120]	@ (8003f80 <HAL_TIM_PWM_Start+0x138>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d107      	bne.n	8003f1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a18      	ldr	r2, [pc, #96]	@ (8003f80 <HAL_TIM_PWM_Start+0x138>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00e      	beq.n	8003f42 <HAL_TIM_PWM_Start+0xfa>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f2c:	d009      	beq.n	8003f42 <HAL_TIM_PWM_Start+0xfa>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a14      	ldr	r2, [pc, #80]	@ (8003f84 <HAL_TIM_PWM_Start+0x13c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_TIM_PWM_Start+0xfa>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a12      	ldr	r2, [pc, #72]	@ (8003f88 <HAL_TIM_PWM_Start+0x140>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d111      	bne.n	8003f66 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b06      	cmp	r3, #6
 8003f52:	d010      	beq.n	8003f76 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f64:	e007      	b.n	8003f76 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0201 	orr.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800

08003f8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e0ae      	b.n	8004108 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b0c      	cmp	r3, #12
 8003fb6:	f200 809f 	bhi.w	80040f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fba:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	080040f9 	.word	0x080040f9
 8003fc8:	080040f9 	.word	0x080040f9
 8003fcc:	080040f9 	.word	0x080040f9
 8003fd0:	08004035 	.word	0x08004035
 8003fd4:	080040f9 	.word	0x080040f9
 8003fd8:	080040f9 	.word	0x080040f9
 8003fdc:	080040f9 	.word	0x080040f9
 8003fe0:	08004077 	.word	0x08004077
 8003fe4:	080040f9 	.word	0x080040f9
 8003fe8:	080040f9 	.word	0x080040f9
 8003fec:	080040f9 	.word	0x080040f9
 8003ff0:	080040b7 	.word	0x080040b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f9be 	bl	800437c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0208 	orr.w	r2, r2, #8
 800400e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0204 	bic.w	r2, r2, #4
 800401e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6999      	ldr	r1, [r3, #24]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	619a      	str	r2, [r3, #24]
      break;
 8004032:	e064      	b.n	80040fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fa04 	bl	8004448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800404e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800405e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6999      	ldr	r1, [r3, #24]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	021a      	lsls	r2, r3, #8
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	619a      	str	r2, [r3, #24]
      break;
 8004074:	e043      	b.n	80040fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fa4d 	bl	800451c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0208 	orr.w	r2, r2, #8
 8004090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0204 	bic.w	r2, r2, #4
 80040a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69d9      	ldr	r1, [r3, #28]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	61da      	str	r2, [r3, #28]
      break;
 80040b4:	e023      	b.n	80040fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fa97 	bl	80045f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69d9      	ldr	r1, [r3, #28]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	021a      	lsls	r2, r3, #8
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	61da      	str	r2, [r3, #28]
      break;
 80040f6:	e002      	b.n	80040fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	75fb      	strb	r3, [r7, #23]
      break;
 80040fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_TIM_ConfigClockSource+0x1c>
 8004128:	2302      	movs	r3, #2
 800412a:	e0b4      	b.n	8004296 <HAL_TIM_ConfigClockSource+0x186>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800414a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004164:	d03e      	beq.n	80041e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416a:	f200 8087 	bhi.w	800427c <HAL_TIM_ConfigClockSource+0x16c>
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004172:	f000 8086 	beq.w	8004282 <HAL_TIM_ConfigClockSource+0x172>
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417a:	d87f      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 800417c:	2b70      	cmp	r3, #112	@ 0x70
 800417e:	d01a      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004180:	2b70      	cmp	r3, #112	@ 0x70
 8004182:	d87b      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 8004184:	2b60      	cmp	r3, #96	@ 0x60
 8004186:	d050      	beq.n	800422a <HAL_TIM_ConfigClockSource+0x11a>
 8004188:	2b60      	cmp	r3, #96	@ 0x60
 800418a:	d877      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 800418c:	2b50      	cmp	r3, #80	@ 0x50
 800418e:	d03c      	beq.n	800420a <HAL_TIM_ConfigClockSource+0xfa>
 8004190:	2b50      	cmp	r3, #80	@ 0x50
 8004192:	d873      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 8004194:	2b40      	cmp	r3, #64	@ 0x40
 8004196:	d058      	beq.n	800424a <HAL_TIM_ConfigClockSource+0x13a>
 8004198:	2b40      	cmp	r3, #64	@ 0x40
 800419a:	d86f      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 800419c:	2b30      	cmp	r3, #48	@ 0x30
 800419e:	d064      	beq.n	800426a <HAL_TIM_ConfigClockSource+0x15a>
 80041a0:	2b30      	cmp	r3, #48	@ 0x30
 80041a2:	d86b      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d060      	beq.n	800426a <HAL_TIM_ConfigClockSource+0x15a>
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d867      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d05c      	beq.n	800426a <HAL_TIM_ConfigClockSource+0x15a>
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d05a      	beq.n	800426a <HAL_TIM_ConfigClockSource+0x15a>
 80041b4:	e062      	b.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041c6:	f000 fad8 	bl	800477a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	609a      	str	r2, [r3, #8]
      break;
 80041e2:	e04f      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f4:	f000 fac1 	bl	800477a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004206:	609a      	str	r2, [r3, #8]
      break;
 8004208:	e03c      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004216:	461a      	mov	r2, r3
 8004218:	f000 fa38 	bl	800468c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2150      	movs	r1, #80	@ 0x50
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fa8f 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004228:	e02c      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004236:	461a      	mov	r2, r3
 8004238:	f000 fa56 	bl	80046e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2160      	movs	r1, #96	@ 0x60
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fa7f 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004248:	e01c      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004256:	461a      	mov	r2, r3
 8004258:	f000 fa18 	bl	800468c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2140      	movs	r1, #64	@ 0x40
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fa6f 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004268:	e00c      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f000 fa66 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 800427a:	e003      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
      break;
 8004280:	e000      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004294:	7bfb      	ldrb	r3, [r7, #15]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004370 <TIM_Base_SetConfig+0xd0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00b      	beq.n	80042d0 <TIM_Base_SetConfig+0x30>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042be:	d007      	beq.n	80042d0 <TIM_Base_SetConfig+0x30>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004374 <TIM_Base_SetConfig+0xd4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_Base_SetConfig+0x30>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004378 <TIM_Base_SetConfig+0xd8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d108      	bne.n	80042e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a22      	ldr	r2, [pc, #136]	@ (8004370 <TIM_Base_SetConfig+0xd0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00b      	beq.n	8004302 <TIM_Base_SetConfig+0x62>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f0:	d007      	beq.n	8004302 <TIM_Base_SetConfig+0x62>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004374 <TIM_Base_SetConfig+0xd4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_Base_SetConfig+0x62>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004378 <TIM_Base_SetConfig+0xd8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d108      	bne.n	8004314 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a0d      	ldr	r2, [pc, #52]	@ (8004370 <TIM_Base_SetConfig+0xd0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d103      	bne.n	8004348 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f023 0201 	bic.w	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	611a      	str	r2, [r3, #16]
  }
}
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800

0800437c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f023 0201 	bic.w	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f023 0302 	bic.w	r3, r3, #2
 80043c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004444 <TIM_OC1_SetConfig+0xc8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d10c      	bne.n	80043f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0308 	bic.w	r3, r3, #8
 80043de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f023 0304 	bic.w	r3, r3, #4
 80043f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a13      	ldr	r2, [pc, #76]	@ (8004444 <TIM_OC1_SetConfig+0xc8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d111      	bne.n	800441e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	621a      	str	r2, [r3, #32]
}
 8004438:	bf00      	nop
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40012c00 	.word	0x40012c00

08004448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f023 0210 	bic.w	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f023 0320 	bic.w	r3, r3, #32
 8004492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004518 <TIM_OC2_SetConfig+0xd0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d10d      	bne.n	80044c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a14      	ldr	r2, [pc, #80]	@ (8004518 <TIM_OC2_SetConfig+0xd0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d113      	bne.n	80044f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr
 8004518:	40012c00 	.word	0x40012c00

0800451c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800454a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0303 	bic.w	r3, r3, #3
 8004552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a1d      	ldr	r2, [pc, #116]	@ (80045ec <TIM_OC3_SetConfig+0xd0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10d      	bne.n	8004596 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a14      	ldr	r2, [pc, #80]	@ (80045ec <TIM_OC3_SetConfig+0xd0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d113      	bne.n	80045c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	621a      	str	r2, [r3, #32]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40012c00 	.word	0x40012c00

080045f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800463a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	031b      	lsls	r3, r3, #12
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a0f      	ldr	r2, [pc, #60]	@ (8004688 <TIM_OC4_SetConfig+0x98>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d109      	bne.n	8004664 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	019b      	lsls	r3, r3, #6
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr
 8004688:	40012c00 	.word	0x40012c00

0800468c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f023 0201 	bic.w	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f023 030a 	bic.w	r3, r3, #10
 80046c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f023 0210 	bic.w	r2, r3, #16
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	031b      	lsls	r3, r3, #12
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004724:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	621a      	str	r2, [r3, #32]
}
 800473c:	bf00      	nop
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr

08004746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800475c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	f043 0307 	orr.w	r3, r3, #7
 8004768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800477a:	b480      	push	{r7}
 800477c:	b087      	sub	sp, #28
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004794:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	021a      	lsls	r2, r3, #8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	431a      	orrs	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	609a      	str	r2, [r3, #8]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	2201      	movs	r2, #1
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1a      	ldr	r2, [r3, #32]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	43db      	mvns	r3, r3
 80047da:	401a      	ands	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a1a      	ldr	r2, [r3, #32]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	fa01 f303 	lsl.w	r3, r1, r3
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	621a      	str	r2, [r3, #32]
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr

08004800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004814:	2302      	movs	r3, #2
 8004816:	e046      	b.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a16      	ldr	r2, [pc, #88]	@ (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00e      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004864:	d009      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a12      	ldr	r2, [pc, #72]	@ (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a10      	ldr	r2, [pc, #64]	@ (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d10c      	bne.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	4313      	orrs	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800

080048bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e042      	b.n	8004954 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fd fbec 	bl	80020c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2224      	movs	r2, #36	@ 0x24
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f971 	bl	8004be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	@ 0x28
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b20      	cmp	r3, #32
 800497a:	d175      	bne.n	8004a68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_UART_Transmit+0x2c>
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e06e      	b.n	8004a6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2221      	movs	r2, #33	@ 0x21
 8004996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800499a:	f7fd fcc3 	bl	8002324 <HAL_GetTick>
 800499e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	88fa      	ldrh	r2, [r7, #6]
 80049a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	88fa      	ldrh	r2, [r7, #6]
 80049aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b4:	d108      	bne.n	80049c8 <HAL_UART_Transmit+0x6c>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d104      	bne.n	80049c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	e003      	b.n	80049d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049d0:	e02e      	b.n	8004a30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2200      	movs	r2, #0
 80049da:	2180      	movs	r1, #128	@ 0x80
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f848 	bl	8004a72 <UART_WaitOnFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e03a      	b.n	8004a6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	e007      	b.n	8004a22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	781a      	ldrb	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1cb      	bne.n	80049d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2200      	movs	r2, #0
 8004a42:	2140      	movs	r1, #64	@ 0x40
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f814 	bl	8004a72 <UART_WaitOnFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e006      	b.n	8004a6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e000      	b.n	8004a6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
  }
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b086      	sub	sp, #24
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	603b      	str	r3, [r7, #0]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a82:	e03b      	b.n	8004afc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a8a:	d037      	beq.n	8004afc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8c:	f7fd fc4a 	bl	8002324 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	6a3a      	ldr	r2, [r7, #32]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d302      	bcc.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e03a      	b.n	8004b1c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d023      	beq.n	8004afc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b80      	cmp	r3, #128	@ 0x80
 8004ab8:	d020      	beq.n	8004afc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b40      	cmp	r3, #64	@ 0x40
 8004abe:	d01d      	beq.n	8004afc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d116      	bne.n	8004afc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f81d 	bl	8004b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2208      	movs	r2, #8
 8004aee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e00f      	b.n	8004b1c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d0b4      	beq.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b095      	sub	sp, #84	@ 0x54
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e5      	bne.n	8004b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3314      	adds	r3, #20
 8004b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d119      	bne.n	8004bd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f023 0310 	bic.w	r3, r3, #16
 8004bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bbc:	61ba      	str	r2, [r7, #24]
 8004bbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	6979      	ldr	r1, [r7, #20]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e5      	bne.n	8004b9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bde:	bf00      	nop
 8004be0:	3754      	adds	r7, #84	@ 0x54
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004c22:	f023 030c 	bic.w	r3, r3, #12
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004cfc <UART_SetConfig+0x114>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d103      	bne.n	8004c58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c50:	f7fe ffd6 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	e002      	b.n	8004c5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fe ffbe 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	009a      	lsls	r2, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	4a22      	ldr	r2, [pc, #136]	@ (8004d00 <UART_SetConfig+0x118>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	0119      	lsls	r1, r3, #4
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	009a      	lsls	r2, r3, #2
 8004c88:	441a      	add	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c94:	4b1a      	ldr	r3, [pc, #104]	@ (8004d00 <UART_SetConfig+0x118>)
 8004c96:	fba3 0302 	umull	r0, r3, r3, r2
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	2064      	movs	r0, #100	@ 0x64
 8004c9e:	fb00 f303 	mul.w	r3, r0, r3
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	3332      	adds	r3, #50	@ 0x32
 8004ca8:	4a15      	ldr	r2, [pc, #84]	@ (8004d00 <UART_SetConfig+0x118>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cb4:	4419      	add	r1, r3
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009a      	lsls	r2, r3, #2
 8004cc0:	441a      	add	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d00 <UART_SetConfig+0x118>)
 8004cce:	fba3 0302 	umull	r0, r3, r3, r2
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2064      	movs	r0, #100	@ 0x64
 8004cd6:	fb00 f303 	mul.w	r3, r0, r3
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	3332      	adds	r3, #50	@ 0x32
 8004ce0:	4a07      	ldr	r2, [pc, #28]	@ (8004d00 <UART_SetConfig+0x118>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	f003 020f 	and.w	r2, r3, #15
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004cf4:	bf00      	nop
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40013800 	.word	0x40013800
 8004d00:	51eb851f 	.word	0x51eb851f

08004d04 <siprintf>:
 8004d04:	b40e      	push	{r1, r2, r3}
 8004d06:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d0a:	b510      	push	{r4, lr}
 8004d0c:	2400      	movs	r4, #0
 8004d0e:	b09d      	sub	sp, #116	@ 0x74
 8004d10:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004d12:	9002      	str	r0, [sp, #8]
 8004d14:	9006      	str	r0, [sp, #24]
 8004d16:	9107      	str	r1, [sp, #28]
 8004d18:	9104      	str	r1, [sp, #16]
 8004d1a:	4809      	ldr	r0, [pc, #36]	@ (8004d40 <siprintf+0x3c>)
 8004d1c:	4909      	ldr	r1, [pc, #36]	@ (8004d44 <siprintf+0x40>)
 8004d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d22:	9105      	str	r1, [sp, #20]
 8004d24:	6800      	ldr	r0, [r0, #0]
 8004d26:	a902      	add	r1, sp, #8
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004d2c:	f000 f89c 	bl	8004e68 <_svfiprintf_r>
 8004d30:	9b02      	ldr	r3, [sp, #8]
 8004d32:	701c      	strb	r4, [r3, #0]
 8004d34:	b01d      	add	sp, #116	@ 0x74
 8004d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d3a:	b003      	add	sp, #12
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000018 	.word	0x20000018
 8004d44:	ffff0208 	.word	0xffff0208

08004d48 <memset>:
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4402      	add	r2, r0
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d100      	bne.n	8004d52 <memset+0xa>
 8004d50:	4770      	bx	lr
 8004d52:	f803 1b01 	strb.w	r1, [r3], #1
 8004d56:	e7f9      	b.n	8004d4c <memset+0x4>

08004d58 <__errno>:
 8004d58:	4b01      	ldr	r3, [pc, #4]	@ (8004d60 <__errno+0x8>)
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000018 	.word	0x20000018

08004d64 <__libc_init_array>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	2600      	movs	r6, #0
 8004d68:	4d0c      	ldr	r5, [pc, #48]	@ (8004d9c <__libc_init_array+0x38>)
 8004d6a:	4c0d      	ldr	r4, [pc, #52]	@ (8004da0 <__libc_init_array+0x3c>)
 8004d6c:	1b64      	subs	r4, r4, r5
 8004d6e:	10a4      	asrs	r4, r4, #2
 8004d70:	42a6      	cmp	r6, r4
 8004d72:	d109      	bne.n	8004d88 <__libc_init_array+0x24>
 8004d74:	f000 fc76 	bl	8005664 <_init>
 8004d78:	2600      	movs	r6, #0
 8004d7a:	4d0a      	ldr	r5, [pc, #40]	@ (8004da4 <__libc_init_array+0x40>)
 8004d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8004da8 <__libc_init_array+0x44>)
 8004d7e:	1b64      	subs	r4, r4, r5
 8004d80:	10a4      	asrs	r4, r4, #2
 8004d82:	42a6      	cmp	r6, r4
 8004d84:	d105      	bne.n	8004d92 <__libc_init_array+0x2e>
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8c:	4798      	blx	r3
 8004d8e:	3601      	adds	r6, #1
 8004d90:	e7ee      	b.n	8004d70 <__libc_init_array+0xc>
 8004d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d96:	4798      	blx	r3
 8004d98:	3601      	adds	r6, #1
 8004d9a:	e7f2      	b.n	8004d82 <__libc_init_array+0x1e>
 8004d9c:	0800645c 	.word	0x0800645c
 8004da0:	0800645c 	.word	0x0800645c
 8004da4:	0800645c 	.word	0x0800645c
 8004da8:	08006460 	.word	0x08006460

08004dac <__retarget_lock_acquire_recursive>:
 8004dac:	4770      	bx	lr

08004dae <__retarget_lock_release_recursive>:
 8004dae:	4770      	bx	lr

08004db0 <__ssputs_r>:
 8004db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db4:	461f      	mov	r7, r3
 8004db6:	688e      	ldr	r6, [r1, #8]
 8004db8:	4682      	mov	sl, r0
 8004dba:	42be      	cmp	r6, r7
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	4690      	mov	r8, r2
 8004dc0:	680b      	ldr	r3, [r1, #0]
 8004dc2:	d82d      	bhi.n	8004e20 <__ssputs_r+0x70>
 8004dc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004dcc:	d026      	beq.n	8004e1c <__ssputs_r+0x6c>
 8004dce:	6965      	ldr	r5, [r4, #20]
 8004dd0:	6909      	ldr	r1, [r1, #16]
 8004dd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dd6:	eba3 0901 	sub.w	r9, r3, r1
 8004dda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dde:	1c7b      	adds	r3, r7, #1
 8004de0:	444b      	add	r3, r9
 8004de2:	106d      	asrs	r5, r5, #1
 8004de4:	429d      	cmp	r5, r3
 8004de6:	bf38      	it	cc
 8004de8:	461d      	movcc	r5, r3
 8004dea:	0553      	lsls	r3, r2, #21
 8004dec:	d527      	bpl.n	8004e3e <__ssputs_r+0x8e>
 8004dee:	4629      	mov	r1, r5
 8004df0:	f000 f958 	bl	80050a4 <_malloc_r>
 8004df4:	4606      	mov	r6, r0
 8004df6:	b360      	cbz	r0, 8004e52 <__ssputs_r+0xa2>
 8004df8:	464a      	mov	r2, r9
 8004dfa:	6921      	ldr	r1, [r4, #16]
 8004dfc:	f000 fbd4 	bl	80055a8 <memcpy>
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e0a:	81a3      	strh	r3, [r4, #12]
 8004e0c:	6126      	str	r6, [r4, #16]
 8004e0e:	444e      	add	r6, r9
 8004e10:	6026      	str	r6, [r4, #0]
 8004e12:	463e      	mov	r6, r7
 8004e14:	6165      	str	r5, [r4, #20]
 8004e16:	eba5 0509 	sub.w	r5, r5, r9
 8004e1a:	60a5      	str	r5, [r4, #8]
 8004e1c:	42be      	cmp	r6, r7
 8004e1e:	d900      	bls.n	8004e22 <__ssputs_r+0x72>
 8004e20:	463e      	mov	r6, r7
 8004e22:	4632      	mov	r2, r6
 8004e24:	4641      	mov	r1, r8
 8004e26:	6820      	ldr	r0, [r4, #0]
 8004e28:	f000 fb86 	bl	8005538 <memmove>
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	68a3      	ldr	r3, [r4, #8]
 8004e30:	1b9b      	subs	r3, r3, r6
 8004e32:	60a3      	str	r3, [r4, #8]
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	4433      	add	r3, r6
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3e:	462a      	mov	r2, r5
 8004e40:	f000 fb4c 	bl	80054dc <_realloc_r>
 8004e44:	4606      	mov	r6, r0
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d1e0      	bne.n	8004e0c <__ssputs_r+0x5c>
 8004e4a:	4650      	mov	r0, sl
 8004e4c:	6921      	ldr	r1, [r4, #16]
 8004e4e:	f000 fbb9 	bl	80055c4 <_free_r>
 8004e52:	230c      	movs	r3, #12
 8004e54:	f8ca 3000 	str.w	r3, [sl]
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	e7e9      	b.n	8004e3a <__ssputs_r+0x8a>
	...

08004e68 <_svfiprintf_r>:
 8004e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	4698      	mov	r8, r3
 8004e6e:	898b      	ldrh	r3, [r1, #12]
 8004e70:	4607      	mov	r7, r0
 8004e72:	061b      	lsls	r3, r3, #24
 8004e74:	460d      	mov	r5, r1
 8004e76:	4614      	mov	r4, r2
 8004e78:	b09d      	sub	sp, #116	@ 0x74
 8004e7a:	d510      	bpl.n	8004e9e <_svfiprintf_r+0x36>
 8004e7c:	690b      	ldr	r3, [r1, #16]
 8004e7e:	b973      	cbnz	r3, 8004e9e <_svfiprintf_r+0x36>
 8004e80:	2140      	movs	r1, #64	@ 0x40
 8004e82:	f000 f90f 	bl	80050a4 <_malloc_r>
 8004e86:	6028      	str	r0, [r5, #0]
 8004e88:	6128      	str	r0, [r5, #16]
 8004e8a:	b930      	cbnz	r0, 8004e9a <_svfiprintf_r+0x32>
 8004e8c:	230c      	movs	r3, #12
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e94:	b01d      	add	sp, #116	@ 0x74
 8004e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9a:	2340      	movs	r3, #64	@ 0x40
 8004e9c:	616b      	str	r3, [r5, #20]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ea2:	2320      	movs	r3, #32
 8004ea4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ea8:	2330      	movs	r3, #48	@ 0x30
 8004eaa:	f04f 0901 	mov.w	r9, #1
 8004eae:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eb2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800504c <_svfiprintf_r+0x1e4>
 8004eb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004eba:	4623      	mov	r3, r4
 8004ebc:	469a      	mov	sl, r3
 8004ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ec2:	b10a      	cbz	r2, 8004ec8 <_svfiprintf_r+0x60>
 8004ec4:	2a25      	cmp	r2, #37	@ 0x25
 8004ec6:	d1f9      	bne.n	8004ebc <_svfiprintf_r+0x54>
 8004ec8:	ebba 0b04 	subs.w	fp, sl, r4
 8004ecc:	d00b      	beq.n	8004ee6 <_svfiprintf_r+0x7e>
 8004ece:	465b      	mov	r3, fp
 8004ed0:	4622      	mov	r2, r4
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	f7ff ff6b 	bl	8004db0 <__ssputs_r>
 8004eda:	3001      	adds	r0, #1
 8004edc:	f000 80a7 	beq.w	800502e <_svfiprintf_r+0x1c6>
 8004ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ee2:	445a      	add	r2, fp
 8004ee4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 809f 	beq.w	800502e <_svfiprintf_r+0x1c6>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004efa:	f10a 0a01 	add.w	sl, sl, #1
 8004efe:	9304      	str	r3, [sp, #16]
 8004f00:	9307      	str	r3, [sp, #28]
 8004f02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f06:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f08:	4654      	mov	r4, sl
 8004f0a:	2205      	movs	r2, #5
 8004f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f10:	484e      	ldr	r0, [pc, #312]	@ (800504c <_svfiprintf_r+0x1e4>)
 8004f12:	f000 fb3b 	bl	800558c <memchr>
 8004f16:	9a04      	ldr	r2, [sp, #16]
 8004f18:	b9d8      	cbnz	r0, 8004f52 <_svfiprintf_r+0xea>
 8004f1a:	06d0      	lsls	r0, r2, #27
 8004f1c:	bf44      	itt	mi
 8004f1e:	2320      	movmi	r3, #32
 8004f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f24:	0711      	lsls	r1, r2, #28
 8004f26:	bf44      	itt	mi
 8004f28:	232b      	movmi	r3, #43	@ 0x2b
 8004f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f32:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f34:	d015      	beq.n	8004f62 <_svfiprintf_r+0xfa>
 8004f36:	4654      	mov	r4, sl
 8004f38:	2000      	movs	r0, #0
 8004f3a:	f04f 0c0a 	mov.w	ip, #10
 8004f3e:	9a07      	ldr	r2, [sp, #28]
 8004f40:	4621      	mov	r1, r4
 8004f42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f46:	3b30      	subs	r3, #48	@ 0x30
 8004f48:	2b09      	cmp	r3, #9
 8004f4a:	d94b      	bls.n	8004fe4 <_svfiprintf_r+0x17c>
 8004f4c:	b1b0      	cbz	r0, 8004f7c <_svfiprintf_r+0x114>
 8004f4e:	9207      	str	r2, [sp, #28]
 8004f50:	e014      	b.n	8004f7c <_svfiprintf_r+0x114>
 8004f52:	eba0 0308 	sub.w	r3, r0, r8
 8004f56:	fa09 f303 	lsl.w	r3, r9, r3
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	46a2      	mov	sl, r4
 8004f5e:	9304      	str	r3, [sp, #16]
 8004f60:	e7d2      	b.n	8004f08 <_svfiprintf_r+0xa0>
 8004f62:	9b03      	ldr	r3, [sp, #12]
 8004f64:	1d19      	adds	r1, r3, #4
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	9103      	str	r1, [sp, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	bfbb      	ittet	lt
 8004f6e:	425b      	neglt	r3, r3
 8004f70:	f042 0202 	orrlt.w	r2, r2, #2
 8004f74:	9307      	strge	r3, [sp, #28]
 8004f76:	9307      	strlt	r3, [sp, #28]
 8004f78:	bfb8      	it	lt
 8004f7a:	9204      	strlt	r2, [sp, #16]
 8004f7c:	7823      	ldrb	r3, [r4, #0]
 8004f7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f80:	d10a      	bne.n	8004f98 <_svfiprintf_r+0x130>
 8004f82:	7863      	ldrb	r3, [r4, #1]
 8004f84:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f86:	d132      	bne.n	8004fee <_svfiprintf_r+0x186>
 8004f88:	9b03      	ldr	r3, [sp, #12]
 8004f8a:	3402      	adds	r4, #2
 8004f8c:	1d1a      	adds	r2, r3, #4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	9203      	str	r2, [sp, #12]
 8004f92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f96:	9305      	str	r3, [sp, #20]
 8004f98:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005050 <_svfiprintf_r+0x1e8>
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	4650      	mov	r0, sl
 8004fa0:	7821      	ldrb	r1, [r4, #0]
 8004fa2:	f000 faf3 	bl	800558c <memchr>
 8004fa6:	b138      	cbz	r0, 8004fb8 <_svfiprintf_r+0x150>
 8004fa8:	2240      	movs	r2, #64	@ 0x40
 8004faa:	9b04      	ldr	r3, [sp, #16]
 8004fac:	eba0 000a 	sub.w	r0, r0, sl
 8004fb0:	4082      	lsls	r2, r0
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	3401      	adds	r4, #1
 8004fb6:	9304      	str	r3, [sp, #16]
 8004fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fbc:	2206      	movs	r2, #6
 8004fbe:	4825      	ldr	r0, [pc, #148]	@ (8005054 <_svfiprintf_r+0x1ec>)
 8004fc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fc4:	f000 fae2 	bl	800558c <memchr>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d036      	beq.n	800503a <_svfiprintf_r+0x1d2>
 8004fcc:	4b22      	ldr	r3, [pc, #136]	@ (8005058 <_svfiprintf_r+0x1f0>)
 8004fce:	bb1b      	cbnz	r3, 8005018 <_svfiprintf_r+0x1b0>
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	3307      	adds	r3, #7
 8004fd4:	f023 0307 	bic.w	r3, r3, #7
 8004fd8:	3308      	adds	r3, #8
 8004fda:	9303      	str	r3, [sp, #12]
 8004fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fde:	4433      	add	r3, r6
 8004fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fe2:	e76a      	b.n	8004eba <_svfiprintf_r+0x52>
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	2001      	movs	r0, #1
 8004fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fec:	e7a8      	b.n	8004f40 <_svfiprintf_r+0xd8>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f04f 0c0a 	mov.w	ip, #10
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	3401      	adds	r4, #1
 8004ff8:	9305      	str	r3, [sp, #20]
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005000:	3a30      	subs	r2, #48	@ 0x30
 8005002:	2a09      	cmp	r2, #9
 8005004:	d903      	bls.n	800500e <_svfiprintf_r+0x1a6>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0c6      	beq.n	8004f98 <_svfiprintf_r+0x130>
 800500a:	9105      	str	r1, [sp, #20]
 800500c:	e7c4      	b.n	8004f98 <_svfiprintf_r+0x130>
 800500e:	4604      	mov	r4, r0
 8005010:	2301      	movs	r3, #1
 8005012:	fb0c 2101 	mla	r1, ip, r1, r2
 8005016:	e7f0      	b.n	8004ffa <_svfiprintf_r+0x192>
 8005018:	ab03      	add	r3, sp, #12
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	462a      	mov	r2, r5
 800501e:	4638      	mov	r0, r7
 8005020:	4b0e      	ldr	r3, [pc, #56]	@ (800505c <_svfiprintf_r+0x1f4>)
 8005022:	a904      	add	r1, sp, #16
 8005024:	f3af 8000 	nop.w
 8005028:	1c42      	adds	r2, r0, #1
 800502a:	4606      	mov	r6, r0
 800502c:	d1d6      	bne.n	8004fdc <_svfiprintf_r+0x174>
 800502e:	89ab      	ldrh	r3, [r5, #12]
 8005030:	065b      	lsls	r3, r3, #25
 8005032:	f53f af2d 	bmi.w	8004e90 <_svfiprintf_r+0x28>
 8005036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005038:	e72c      	b.n	8004e94 <_svfiprintf_r+0x2c>
 800503a:	ab03      	add	r3, sp, #12
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	462a      	mov	r2, r5
 8005040:	4638      	mov	r0, r7
 8005042:	4b06      	ldr	r3, [pc, #24]	@ (800505c <_svfiprintf_r+0x1f4>)
 8005044:	a904      	add	r1, sp, #16
 8005046:	f000 f91f 	bl	8005288 <_printf_i>
 800504a:	e7ed      	b.n	8005028 <_svfiprintf_r+0x1c0>
 800504c:	08006426 	.word	0x08006426
 8005050:	0800642c 	.word	0x0800642c
 8005054:	08006430 	.word	0x08006430
 8005058:	00000000 	.word	0x00000000
 800505c:	08004db1 	.word	0x08004db1

08005060 <sbrk_aligned>:
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	4e0f      	ldr	r6, [pc, #60]	@ (80050a0 <sbrk_aligned+0x40>)
 8005064:	460c      	mov	r4, r1
 8005066:	6831      	ldr	r1, [r6, #0]
 8005068:	4605      	mov	r5, r0
 800506a:	b911      	cbnz	r1, 8005072 <sbrk_aligned+0x12>
 800506c:	f000 fa7e 	bl	800556c <_sbrk_r>
 8005070:	6030      	str	r0, [r6, #0]
 8005072:	4621      	mov	r1, r4
 8005074:	4628      	mov	r0, r5
 8005076:	f000 fa79 	bl	800556c <_sbrk_r>
 800507a:	1c43      	adds	r3, r0, #1
 800507c:	d103      	bne.n	8005086 <sbrk_aligned+0x26>
 800507e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005082:	4620      	mov	r0, r4
 8005084:	bd70      	pop	{r4, r5, r6, pc}
 8005086:	1cc4      	adds	r4, r0, #3
 8005088:	f024 0403 	bic.w	r4, r4, #3
 800508c:	42a0      	cmp	r0, r4
 800508e:	d0f8      	beq.n	8005082 <sbrk_aligned+0x22>
 8005090:	1a21      	subs	r1, r4, r0
 8005092:	4628      	mov	r0, r5
 8005094:	f000 fa6a 	bl	800556c <_sbrk_r>
 8005098:	3001      	adds	r0, #1
 800509a:	d1f2      	bne.n	8005082 <sbrk_aligned+0x22>
 800509c:	e7ef      	b.n	800507e <sbrk_aligned+0x1e>
 800509e:	bf00      	nop
 80050a0:	20000738 	.word	0x20000738

080050a4 <_malloc_r>:
 80050a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050a8:	1ccd      	adds	r5, r1, #3
 80050aa:	f025 0503 	bic.w	r5, r5, #3
 80050ae:	3508      	adds	r5, #8
 80050b0:	2d0c      	cmp	r5, #12
 80050b2:	bf38      	it	cc
 80050b4:	250c      	movcc	r5, #12
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	4606      	mov	r6, r0
 80050ba:	db01      	blt.n	80050c0 <_malloc_r+0x1c>
 80050bc:	42a9      	cmp	r1, r5
 80050be:	d904      	bls.n	80050ca <_malloc_r+0x26>
 80050c0:	230c      	movs	r3, #12
 80050c2:	6033      	str	r3, [r6, #0]
 80050c4:	2000      	movs	r0, #0
 80050c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051a0 <_malloc_r+0xfc>
 80050ce:	f000 f9f9 	bl	80054c4 <__malloc_lock>
 80050d2:	f8d8 3000 	ldr.w	r3, [r8]
 80050d6:	461c      	mov	r4, r3
 80050d8:	bb44      	cbnz	r4, 800512c <_malloc_r+0x88>
 80050da:	4629      	mov	r1, r5
 80050dc:	4630      	mov	r0, r6
 80050de:	f7ff ffbf 	bl	8005060 <sbrk_aligned>
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	4604      	mov	r4, r0
 80050e6:	d158      	bne.n	800519a <_malloc_r+0xf6>
 80050e8:	f8d8 4000 	ldr.w	r4, [r8]
 80050ec:	4627      	mov	r7, r4
 80050ee:	2f00      	cmp	r7, #0
 80050f0:	d143      	bne.n	800517a <_malloc_r+0xd6>
 80050f2:	2c00      	cmp	r4, #0
 80050f4:	d04b      	beq.n	800518e <_malloc_r+0xea>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	4639      	mov	r1, r7
 80050fa:	4630      	mov	r0, r6
 80050fc:	eb04 0903 	add.w	r9, r4, r3
 8005100:	f000 fa34 	bl	800556c <_sbrk_r>
 8005104:	4581      	cmp	r9, r0
 8005106:	d142      	bne.n	800518e <_malloc_r+0xea>
 8005108:	6821      	ldr	r1, [r4, #0]
 800510a:	4630      	mov	r0, r6
 800510c:	1a6d      	subs	r5, r5, r1
 800510e:	4629      	mov	r1, r5
 8005110:	f7ff ffa6 	bl	8005060 <sbrk_aligned>
 8005114:	3001      	adds	r0, #1
 8005116:	d03a      	beq.n	800518e <_malloc_r+0xea>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	442b      	add	r3, r5
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	f8d8 3000 	ldr.w	r3, [r8]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	bb62      	cbnz	r2, 8005180 <_malloc_r+0xdc>
 8005126:	f8c8 7000 	str.w	r7, [r8]
 800512a:	e00f      	b.n	800514c <_malloc_r+0xa8>
 800512c:	6822      	ldr	r2, [r4, #0]
 800512e:	1b52      	subs	r2, r2, r5
 8005130:	d420      	bmi.n	8005174 <_malloc_r+0xd0>
 8005132:	2a0b      	cmp	r2, #11
 8005134:	d917      	bls.n	8005166 <_malloc_r+0xc2>
 8005136:	1961      	adds	r1, r4, r5
 8005138:	42a3      	cmp	r3, r4
 800513a:	6025      	str	r5, [r4, #0]
 800513c:	bf18      	it	ne
 800513e:	6059      	strne	r1, [r3, #4]
 8005140:	6863      	ldr	r3, [r4, #4]
 8005142:	bf08      	it	eq
 8005144:	f8c8 1000 	streq.w	r1, [r8]
 8005148:	5162      	str	r2, [r4, r5]
 800514a:	604b      	str	r3, [r1, #4]
 800514c:	4630      	mov	r0, r6
 800514e:	f000 f9bf 	bl	80054d0 <__malloc_unlock>
 8005152:	f104 000b 	add.w	r0, r4, #11
 8005156:	1d23      	adds	r3, r4, #4
 8005158:	f020 0007 	bic.w	r0, r0, #7
 800515c:	1ac2      	subs	r2, r0, r3
 800515e:	bf1c      	itt	ne
 8005160:	1a1b      	subne	r3, r3, r0
 8005162:	50a3      	strne	r3, [r4, r2]
 8005164:	e7af      	b.n	80050c6 <_malloc_r+0x22>
 8005166:	6862      	ldr	r2, [r4, #4]
 8005168:	42a3      	cmp	r3, r4
 800516a:	bf0c      	ite	eq
 800516c:	f8c8 2000 	streq.w	r2, [r8]
 8005170:	605a      	strne	r2, [r3, #4]
 8005172:	e7eb      	b.n	800514c <_malloc_r+0xa8>
 8005174:	4623      	mov	r3, r4
 8005176:	6864      	ldr	r4, [r4, #4]
 8005178:	e7ae      	b.n	80050d8 <_malloc_r+0x34>
 800517a:	463c      	mov	r4, r7
 800517c:	687f      	ldr	r7, [r7, #4]
 800517e:	e7b6      	b.n	80050ee <_malloc_r+0x4a>
 8005180:	461a      	mov	r2, r3
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	42a3      	cmp	r3, r4
 8005186:	d1fb      	bne.n	8005180 <_malloc_r+0xdc>
 8005188:	2300      	movs	r3, #0
 800518a:	6053      	str	r3, [r2, #4]
 800518c:	e7de      	b.n	800514c <_malloc_r+0xa8>
 800518e:	230c      	movs	r3, #12
 8005190:	4630      	mov	r0, r6
 8005192:	6033      	str	r3, [r6, #0]
 8005194:	f000 f99c 	bl	80054d0 <__malloc_unlock>
 8005198:	e794      	b.n	80050c4 <_malloc_r+0x20>
 800519a:	6005      	str	r5, [r0, #0]
 800519c:	e7d6      	b.n	800514c <_malloc_r+0xa8>
 800519e:	bf00      	nop
 80051a0:	2000073c 	.word	0x2000073c

080051a4 <_printf_common>:
 80051a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a8:	4616      	mov	r6, r2
 80051aa:	4698      	mov	r8, r3
 80051ac:	688a      	ldr	r2, [r1, #8]
 80051ae:	690b      	ldr	r3, [r1, #16]
 80051b0:	4607      	mov	r7, r0
 80051b2:	4293      	cmp	r3, r2
 80051b4:	bfb8      	it	lt
 80051b6:	4613      	movlt	r3, r2
 80051b8:	6033      	str	r3, [r6, #0]
 80051ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051be:	460c      	mov	r4, r1
 80051c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051c4:	b10a      	cbz	r2, 80051ca <_printf_common+0x26>
 80051c6:	3301      	adds	r3, #1
 80051c8:	6033      	str	r3, [r6, #0]
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	0699      	lsls	r1, r3, #26
 80051ce:	bf42      	ittt	mi
 80051d0:	6833      	ldrmi	r3, [r6, #0]
 80051d2:	3302      	addmi	r3, #2
 80051d4:	6033      	strmi	r3, [r6, #0]
 80051d6:	6825      	ldr	r5, [r4, #0]
 80051d8:	f015 0506 	ands.w	r5, r5, #6
 80051dc:	d106      	bne.n	80051ec <_printf_common+0x48>
 80051de:	f104 0a19 	add.w	sl, r4, #25
 80051e2:	68e3      	ldr	r3, [r4, #12]
 80051e4:	6832      	ldr	r2, [r6, #0]
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	42ab      	cmp	r3, r5
 80051ea:	dc2b      	bgt.n	8005244 <_printf_common+0xa0>
 80051ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	3b00      	subs	r3, #0
 80051f4:	bf18      	it	ne
 80051f6:	2301      	movne	r3, #1
 80051f8:	0692      	lsls	r2, r2, #26
 80051fa:	d430      	bmi.n	800525e <_printf_common+0xba>
 80051fc:	4641      	mov	r1, r8
 80051fe:	4638      	mov	r0, r7
 8005200:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005204:	47c8      	blx	r9
 8005206:	3001      	adds	r0, #1
 8005208:	d023      	beq.n	8005252 <_printf_common+0xae>
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	6922      	ldr	r2, [r4, #16]
 800520e:	f003 0306 	and.w	r3, r3, #6
 8005212:	2b04      	cmp	r3, #4
 8005214:	bf14      	ite	ne
 8005216:	2500      	movne	r5, #0
 8005218:	6833      	ldreq	r3, [r6, #0]
 800521a:	f04f 0600 	mov.w	r6, #0
 800521e:	bf08      	it	eq
 8005220:	68e5      	ldreq	r5, [r4, #12]
 8005222:	f104 041a 	add.w	r4, r4, #26
 8005226:	bf08      	it	eq
 8005228:	1aed      	subeq	r5, r5, r3
 800522a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800522e:	bf08      	it	eq
 8005230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005234:	4293      	cmp	r3, r2
 8005236:	bfc4      	itt	gt
 8005238:	1a9b      	subgt	r3, r3, r2
 800523a:	18ed      	addgt	r5, r5, r3
 800523c:	42b5      	cmp	r5, r6
 800523e:	d11a      	bne.n	8005276 <_printf_common+0xd2>
 8005240:	2000      	movs	r0, #0
 8005242:	e008      	b.n	8005256 <_printf_common+0xb2>
 8005244:	2301      	movs	r3, #1
 8005246:	4652      	mov	r2, sl
 8005248:	4641      	mov	r1, r8
 800524a:	4638      	mov	r0, r7
 800524c:	47c8      	blx	r9
 800524e:	3001      	adds	r0, #1
 8005250:	d103      	bne.n	800525a <_printf_common+0xb6>
 8005252:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525a:	3501      	adds	r5, #1
 800525c:	e7c1      	b.n	80051e2 <_printf_common+0x3e>
 800525e:	2030      	movs	r0, #48	@ 0x30
 8005260:	18e1      	adds	r1, r4, r3
 8005262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800526c:	4422      	add	r2, r4
 800526e:	3302      	adds	r3, #2
 8005270:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005274:	e7c2      	b.n	80051fc <_printf_common+0x58>
 8005276:	2301      	movs	r3, #1
 8005278:	4622      	mov	r2, r4
 800527a:	4641      	mov	r1, r8
 800527c:	4638      	mov	r0, r7
 800527e:	47c8      	blx	r9
 8005280:	3001      	adds	r0, #1
 8005282:	d0e6      	beq.n	8005252 <_printf_common+0xae>
 8005284:	3601      	adds	r6, #1
 8005286:	e7d9      	b.n	800523c <_printf_common+0x98>

08005288 <_printf_i>:
 8005288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800528c:	7e0f      	ldrb	r7, [r1, #24]
 800528e:	4691      	mov	r9, r2
 8005290:	2f78      	cmp	r7, #120	@ 0x78
 8005292:	4680      	mov	r8, r0
 8005294:	460c      	mov	r4, r1
 8005296:	469a      	mov	sl, r3
 8005298:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800529a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800529e:	d807      	bhi.n	80052b0 <_printf_i+0x28>
 80052a0:	2f62      	cmp	r7, #98	@ 0x62
 80052a2:	d80a      	bhi.n	80052ba <_printf_i+0x32>
 80052a4:	2f00      	cmp	r7, #0
 80052a6:	f000 80d1 	beq.w	800544c <_printf_i+0x1c4>
 80052aa:	2f58      	cmp	r7, #88	@ 0x58
 80052ac:	f000 80b8 	beq.w	8005420 <_printf_i+0x198>
 80052b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052b8:	e03a      	b.n	8005330 <_printf_i+0xa8>
 80052ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052be:	2b15      	cmp	r3, #21
 80052c0:	d8f6      	bhi.n	80052b0 <_printf_i+0x28>
 80052c2:	a101      	add	r1, pc, #4	@ (adr r1, 80052c8 <_printf_i+0x40>)
 80052c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052c8:	08005321 	.word	0x08005321
 80052cc:	08005335 	.word	0x08005335
 80052d0:	080052b1 	.word	0x080052b1
 80052d4:	080052b1 	.word	0x080052b1
 80052d8:	080052b1 	.word	0x080052b1
 80052dc:	080052b1 	.word	0x080052b1
 80052e0:	08005335 	.word	0x08005335
 80052e4:	080052b1 	.word	0x080052b1
 80052e8:	080052b1 	.word	0x080052b1
 80052ec:	080052b1 	.word	0x080052b1
 80052f0:	080052b1 	.word	0x080052b1
 80052f4:	08005433 	.word	0x08005433
 80052f8:	0800535f 	.word	0x0800535f
 80052fc:	080053ed 	.word	0x080053ed
 8005300:	080052b1 	.word	0x080052b1
 8005304:	080052b1 	.word	0x080052b1
 8005308:	08005455 	.word	0x08005455
 800530c:	080052b1 	.word	0x080052b1
 8005310:	0800535f 	.word	0x0800535f
 8005314:	080052b1 	.word	0x080052b1
 8005318:	080052b1 	.word	0x080052b1
 800531c:	080053f5 	.word	0x080053f5
 8005320:	6833      	ldr	r3, [r6, #0]
 8005322:	1d1a      	adds	r2, r3, #4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6032      	str	r2, [r6, #0]
 8005328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800532c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005330:	2301      	movs	r3, #1
 8005332:	e09c      	b.n	800546e <_printf_i+0x1e6>
 8005334:	6833      	ldr	r3, [r6, #0]
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	1d19      	adds	r1, r3, #4
 800533a:	6031      	str	r1, [r6, #0]
 800533c:	0606      	lsls	r6, r0, #24
 800533e:	d501      	bpl.n	8005344 <_printf_i+0xbc>
 8005340:	681d      	ldr	r5, [r3, #0]
 8005342:	e003      	b.n	800534c <_printf_i+0xc4>
 8005344:	0645      	lsls	r5, r0, #25
 8005346:	d5fb      	bpl.n	8005340 <_printf_i+0xb8>
 8005348:	f9b3 5000 	ldrsh.w	r5, [r3]
 800534c:	2d00      	cmp	r5, #0
 800534e:	da03      	bge.n	8005358 <_printf_i+0xd0>
 8005350:	232d      	movs	r3, #45	@ 0x2d
 8005352:	426d      	negs	r5, r5
 8005354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005358:	230a      	movs	r3, #10
 800535a:	4858      	ldr	r0, [pc, #352]	@ (80054bc <_printf_i+0x234>)
 800535c:	e011      	b.n	8005382 <_printf_i+0xfa>
 800535e:	6821      	ldr	r1, [r4, #0]
 8005360:	6833      	ldr	r3, [r6, #0]
 8005362:	0608      	lsls	r0, r1, #24
 8005364:	f853 5b04 	ldr.w	r5, [r3], #4
 8005368:	d402      	bmi.n	8005370 <_printf_i+0xe8>
 800536a:	0649      	lsls	r1, r1, #25
 800536c:	bf48      	it	mi
 800536e:	b2ad      	uxthmi	r5, r5
 8005370:	2f6f      	cmp	r7, #111	@ 0x6f
 8005372:	6033      	str	r3, [r6, #0]
 8005374:	bf14      	ite	ne
 8005376:	230a      	movne	r3, #10
 8005378:	2308      	moveq	r3, #8
 800537a:	4850      	ldr	r0, [pc, #320]	@ (80054bc <_printf_i+0x234>)
 800537c:	2100      	movs	r1, #0
 800537e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005382:	6866      	ldr	r6, [r4, #4]
 8005384:	2e00      	cmp	r6, #0
 8005386:	60a6      	str	r6, [r4, #8]
 8005388:	db05      	blt.n	8005396 <_printf_i+0x10e>
 800538a:	6821      	ldr	r1, [r4, #0]
 800538c:	432e      	orrs	r6, r5
 800538e:	f021 0104 	bic.w	r1, r1, #4
 8005392:	6021      	str	r1, [r4, #0]
 8005394:	d04b      	beq.n	800542e <_printf_i+0x1a6>
 8005396:	4616      	mov	r6, r2
 8005398:	fbb5 f1f3 	udiv	r1, r5, r3
 800539c:	fb03 5711 	mls	r7, r3, r1, r5
 80053a0:	5dc7      	ldrb	r7, [r0, r7]
 80053a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053a6:	462f      	mov	r7, r5
 80053a8:	42bb      	cmp	r3, r7
 80053aa:	460d      	mov	r5, r1
 80053ac:	d9f4      	bls.n	8005398 <_printf_i+0x110>
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d10b      	bne.n	80053ca <_printf_i+0x142>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	07df      	lsls	r7, r3, #31
 80053b6:	d508      	bpl.n	80053ca <_printf_i+0x142>
 80053b8:	6923      	ldr	r3, [r4, #16]
 80053ba:	6861      	ldr	r1, [r4, #4]
 80053bc:	4299      	cmp	r1, r3
 80053be:	bfde      	ittt	le
 80053c0:	2330      	movle	r3, #48	@ 0x30
 80053c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053c6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80053ca:	1b92      	subs	r2, r2, r6
 80053cc:	6122      	str	r2, [r4, #16]
 80053ce:	464b      	mov	r3, r9
 80053d0:	4621      	mov	r1, r4
 80053d2:	4640      	mov	r0, r8
 80053d4:	f8cd a000 	str.w	sl, [sp]
 80053d8:	aa03      	add	r2, sp, #12
 80053da:	f7ff fee3 	bl	80051a4 <_printf_common>
 80053de:	3001      	adds	r0, #1
 80053e0:	d14a      	bne.n	8005478 <_printf_i+0x1f0>
 80053e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053e6:	b004      	add	sp, #16
 80053e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	f043 0320 	orr.w	r3, r3, #32
 80053f2:	6023      	str	r3, [r4, #0]
 80053f4:	2778      	movs	r7, #120	@ 0x78
 80053f6:	4832      	ldr	r0, [pc, #200]	@ (80054c0 <_printf_i+0x238>)
 80053f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	6831      	ldr	r1, [r6, #0]
 8005400:	061f      	lsls	r7, r3, #24
 8005402:	f851 5b04 	ldr.w	r5, [r1], #4
 8005406:	d402      	bmi.n	800540e <_printf_i+0x186>
 8005408:	065f      	lsls	r7, r3, #25
 800540a:	bf48      	it	mi
 800540c:	b2ad      	uxthmi	r5, r5
 800540e:	6031      	str	r1, [r6, #0]
 8005410:	07d9      	lsls	r1, r3, #31
 8005412:	bf44      	itt	mi
 8005414:	f043 0320 	orrmi.w	r3, r3, #32
 8005418:	6023      	strmi	r3, [r4, #0]
 800541a:	b11d      	cbz	r5, 8005424 <_printf_i+0x19c>
 800541c:	2310      	movs	r3, #16
 800541e:	e7ad      	b.n	800537c <_printf_i+0xf4>
 8005420:	4826      	ldr	r0, [pc, #152]	@ (80054bc <_printf_i+0x234>)
 8005422:	e7e9      	b.n	80053f8 <_printf_i+0x170>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	f023 0320 	bic.w	r3, r3, #32
 800542a:	6023      	str	r3, [r4, #0]
 800542c:	e7f6      	b.n	800541c <_printf_i+0x194>
 800542e:	4616      	mov	r6, r2
 8005430:	e7bd      	b.n	80053ae <_printf_i+0x126>
 8005432:	6833      	ldr	r3, [r6, #0]
 8005434:	6825      	ldr	r5, [r4, #0]
 8005436:	1d18      	adds	r0, r3, #4
 8005438:	6961      	ldr	r1, [r4, #20]
 800543a:	6030      	str	r0, [r6, #0]
 800543c:	062e      	lsls	r6, r5, #24
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	d501      	bpl.n	8005446 <_printf_i+0x1be>
 8005442:	6019      	str	r1, [r3, #0]
 8005444:	e002      	b.n	800544c <_printf_i+0x1c4>
 8005446:	0668      	lsls	r0, r5, #25
 8005448:	d5fb      	bpl.n	8005442 <_printf_i+0x1ba>
 800544a:	8019      	strh	r1, [r3, #0]
 800544c:	2300      	movs	r3, #0
 800544e:	4616      	mov	r6, r2
 8005450:	6123      	str	r3, [r4, #16]
 8005452:	e7bc      	b.n	80053ce <_printf_i+0x146>
 8005454:	6833      	ldr	r3, [r6, #0]
 8005456:	2100      	movs	r1, #0
 8005458:	1d1a      	adds	r2, r3, #4
 800545a:	6032      	str	r2, [r6, #0]
 800545c:	681e      	ldr	r6, [r3, #0]
 800545e:	6862      	ldr	r2, [r4, #4]
 8005460:	4630      	mov	r0, r6
 8005462:	f000 f893 	bl	800558c <memchr>
 8005466:	b108      	cbz	r0, 800546c <_printf_i+0x1e4>
 8005468:	1b80      	subs	r0, r0, r6
 800546a:	6060      	str	r0, [r4, #4]
 800546c:	6863      	ldr	r3, [r4, #4]
 800546e:	6123      	str	r3, [r4, #16]
 8005470:	2300      	movs	r3, #0
 8005472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005476:	e7aa      	b.n	80053ce <_printf_i+0x146>
 8005478:	4632      	mov	r2, r6
 800547a:	4649      	mov	r1, r9
 800547c:	4640      	mov	r0, r8
 800547e:	6923      	ldr	r3, [r4, #16]
 8005480:	47d0      	blx	sl
 8005482:	3001      	adds	r0, #1
 8005484:	d0ad      	beq.n	80053e2 <_printf_i+0x15a>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	079b      	lsls	r3, r3, #30
 800548a:	d413      	bmi.n	80054b4 <_printf_i+0x22c>
 800548c:	68e0      	ldr	r0, [r4, #12]
 800548e:	9b03      	ldr	r3, [sp, #12]
 8005490:	4298      	cmp	r0, r3
 8005492:	bfb8      	it	lt
 8005494:	4618      	movlt	r0, r3
 8005496:	e7a6      	b.n	80053e6 <_printf_i+0x15e>
 8005498:	2301      	movs	r3, #1
 800549a:	4632      	mov	r2, r6
 800549c:	4649      	mov	r1, r9
 800549e:	4640      	mov	r0, r8
 80054a0:	47d0      	blx	sl
 80054a2:	3001      	adds	r0, #1
 80054a4:	d09d      	beq.n	80053e2 <_printf_i+0x15a>
 80054a6:	3501      	adds	r5, #1
 80054a8:	68e3      	ldr	r3, [r4, #12]
 80054aa:	9903      	ldr	r1, [sp, #12]
 80054ac:	1a5b      	subs	r3, r3, r1
 80054ae:	42ab      	cmp	r3, r5
 80054b0:	dcf2      	bgt.n	8005498 <_printf_i+0x210>
 80054b2:	e7eb      	b.n	800548c <_printf_i+0x204>
 80054b4:	2500      	movs	r5, #0
 80054b6:	f104 0619 	add.w	r6, r4, #25
 80054ba:	e7f5      	b.n	80054a8 <_printf_i+0x220>
 80054bc:	08006437 	.word	0x08006437
 80054c0:	08006448 	.word	0x08006448

080054c4 <__malloc_lock>:
 80054c4:	4801      	ldr	r0, [pc, #4]	@ (80054cc <__malloc_lock+0x8>)
 80054c6:	f7ff bc71 	b.w	8004dac <__retarget_lock_acquire_recursive>
 80054ca:	bf00      	nop
 80054cc:	20000734 	.word	0x20000734

080054d0 <__malloc_unlock>:
 80054d0:	4801      	ldr	r0, [pc, #4]	@ (80054d8 <__malloc_unlock+0x8>)
 80054d2:	f7ff bc6c 	b.w	8004dae <__retarget_lock_release_recursive>
 80054d6:	bf00      	nop
 80054d8:	20000734 	.word	0x20000734

080054dc <_realloc_r>:
 80054dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e0:	4607      	mov	r7, r0
 80054e2:	4614      	mov	r4, r2
 80054e4:	460d      	mov	r5, r1
 80054e6:	b921      	cbnz	r1, 80054f2 <_realloc_r+0x16>
 80054e8:	4611      	mov	r1, r2
 80054ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ee:	f7ff bdd9 	b.w	80050a4 <_malloc_r>
 80054f2:	b92a      	cbnz	r2, 8005500 <_realloc_r+0x24>
 80054f4:	f000 f866 	bl	80055c4 <_free_r>
 80054f8:	4625      	mov	r5, r4
 80054fa:	4628      	mov	r0, r5
 80054fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005500:	f000 f8a8 	bl	8005654 <_malloc_usable_size_r>
 8005504:	4284      	cmp	r4, r0
 8005506:	4606      	mov	r6, r0
 8005508:	d802      	bhi.n	8005510 <_realloc_r+0x34>
 800550a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800550e:	d8f4      	bhi.n	80054fa <_realloc_r+0x1e>
 8005510:	4621      	mov	r1, r4
 8005512:	4638      	mov	r0, r7
 8005514:	f7ff fdc6 	bl	80050a4 <_malloc_r>
 8005518:	4680      	mov	r8, r0
 800551a:	b908      	cbnz	r0, 8005520 <_realloc_r+0x44>
 800551c:	4645      	mov	r5, r8
 800551e:	e7ec      	b.n	80054fa <_realloc_r+0x1e>
 8005520:	42b4      	cmp	r4, r6
 8005522:	4622      	mov	r2, r4
 8005524:	4629      	mov	r1, r5
 8005526:	bf28      	it	cs
 8005528:	4632      	movcs	r2, r6
 800552a:	f000 f83d 	bl	80055a8 <memcpy>
 800552e:	4629      	mov	r1, r5
 8005530:	4638      	mov	r0, r7
 8005532:	f000 f847 	bl	80055c4 <_free_r>
 8005536:	e7f1      	b.n	800551c <_realloc_r+0x40>

08005538 <memmove>:
 8005538:	4288      	cmp	r0, r1
 800553a:	b510      	push	{r4, lr}
 800553c:	eb01 0402 	add.w	r4, r1, r2
 8005540:	d902      	bls.n	8005548 <memmove+0x10>
 8005542:	4284      	cmp	r4, r0
 8005544:	4623      	mov	r3, r4
 8005546:	d807      	bhi.n	8005558 <memmove+0x20>
 8005548:	1e43      	subs	r3, r0, #1
 800554a:	42a1      	cmp	r1, r4
 800554c:	d008      	beq.n	8005560 <memmove+0x28>
 800554e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005556:	e7f8      	b.n	800554a <memmove+0x12>
 8005558:	4601      	mov	r1, r0
 800555a:	4402      	add	r2, r0
 800555c:	428a      	cmp	r2, r1
 800555e:	d100      	bne.n	8005562 <memmove+0x2a>
 8005560:	bd10      	pop	{r4, pc}
 8005562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800556a:	e7f7      	b.n	800555c <memmove+0x24>

0800556c <_sbrk_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	2300      	movs	r3, #0
 8005570:	4d05      	ldr	r5, [pc, #20]	@ (8005588 <_sbrk_r+0x1c>)
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	602b      	str	r3, [r5, #0]
 8005578:	f7fc fe1a 	bl	80021b0 <_sbrk>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <_sbrk_r+0x1a>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	b103      	cbz	r3, 8005586 <_sbrk_r+0x1a>
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	20000740 	.word	0x20000740

0800558c <memchr>:
 800558c:	4603      	mov	r3, r0
 800558e:	b510      	push	{r4, lr}
 8005590:	b2c9      	uxtb	r1, r1
 8005592:	4402      	add	r2, r0
 8005594:	4293      	cmp	r3, r2
 8005596:	4618      	mov	r0, r3
 8005598:	d101      	bne.n	800559e <memchr+0x12>
 800559a:	2000      	movs	r0, #0
 800559c:	e003      	b.n	80055a6 <memchr+0x1a>
 800559e:	7804      	ldrb	r4, [r0, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	428c      	cmp	r4, r1
 80055a4:	d1f6      	bne.n	8005594 <memchr+0x8>
 80055a6:	bd10      	pop	{r4, pc}

080055a8 <memcpy>:
 80055a8:	440a      	add	r2, r1
 80055aa:	4291      	cmp	r1, r2
 80055ac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80055b0:	d100      	bne.n	80055b4 <memcpy+0xc>
 80055b2:	4770      	bx	lr
 80055b4:	b510      	push	{r4, lr}
 80055b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ba:	4291      	cmp	r1, r2
 80055bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055c0:	d1f9      	bne.n	80055b6 <memcpy+0xe>
 80055c2:	bd10      	pop	{r4, pc}

080055c4 <_free_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4605      	mov	r5, r0
 80055c8:	2900      	cmp	r1, #0
 80055ca:	d040      	beq.n	800564e <_free_r+0x8a>
 80055cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d0:	1f0c      	subs	r4, r1, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bfb8      	it	lt
 80055d6:	18e4      	addlt	r4, r4, r3
 80055d8:	f7ff ff74 	bl	80054c4 <__malloc_lock>
 80055dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005650 <_free_r+0x8c>)
 80055de:	6813      	ldr	r3, [r2, #0]
 80055e0:	b933      	cbnz	r3, 80055f0 <_free_r+0x2c>
 80055e2:	6063      	str	r3, [r4, #4]
 80055e4:	6014      	str	r4, [r2, #0]
 80055e6:	4628      	mov	r0, r5
 80055e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055ec:	f7ff bf70 	b.w	80054d0 <__malloc_unlock>
 80055f0:	42a3      	cmp	r3, r4
 80055f2:	d908      	bls.n	8005606 <_free_r+0x42>
 80055f4:	6820      	ldr	r0, [r4, #0]
 80055f6:	1821      	adds	r1, r4, r0
 80055f8:	428b      	cmp	r3, r1
 80055fa:	bf01      	itttt	eq
 80055fc:	6819      	ldreq	r1, [r3, #0]
 80055fe:	685b      	ldreq	r3, [r3, #4]
 8005600:	1809      	addeq	r1, r1, r0
 8005602:	6021      	streq	r1, [r4, #0]
 8005604:	e7ed      	b.n	80055e2 <_free_r+0x1e>
 8005606:	461a      	mov	r2, r3
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	b10b      	cbz	r3, 8005610 <_free_r+0x4c>
 800560c:	42a3      	cmp	r3, r4
 800560e:	d9fa      	bls.n	8005606 <_free_r+0x42>
 8005610:	6811      	ldr	r1, [r2, #0]
 8005612:	1850      	adds	r0, r2, r1
 8005614:	42a0      	cmp	r0, r4
 8005616:	d10b      	bne.n	8005630 <_free_r+0x6c>
 8005618:	6820      	ldr	r0, [r4, #0]
 800561a:	4401      	add	r1, r0
 800561c:	1850      	adds	r0, r2, r1
 800561e:	4283      	cmp	r3, r0
 8005620:	6011      	str	r1, [r2, #0]
 8005622:	d1e0      	bne.n	80055e6 <_free_r+0x22>
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	4408      	add	r0, r1
 800562a:	6010      	str	r0, [r2, #0]
 800562c:	6053      	str	r3, [r2, #4]
 800562e:	e7da      	b.n	80055e6 <_free_r+0x22>
 8005630:	d902      	bls.n	8005638 <_free_r+0x74>
 8005632:	230c      	movs	r3, #12
 8005634:	602b      	str	r3, [r5, #0]
 8005636:	e7d6      	b.n	80055e6 <_free_r+0x22>
 8005638:	6820      	ldr	r0, [r4, #0]
 800563a:	1821      	adds	r1, r4, r0
 800563c:	428b      	cmp	r3, r1
 800563e:	bf01      	itttt	eq
 8005640:	6819      	ldreq	r1, [r3, #0]
 8005642:	685b      	ldreq	r3, [r3, #4]
 8005644:	1809      	addeq	r1, r1, r0
 8005646:	6021      	streq	r1, [r4, #0]
 8005648:	6063      	str	r3, [r4, #4]
 800564a:	6054      	str	r4, [r2, #4]
 800564c:	e7cb      	b.n	80055e6 <_free_r+0x22>
 800564e:	bd38      	pop	{r3, r4, r5, pc}
 8005650:	2000073c 	.word	0x2000073c

08005654 <_malloc_usable_size_r>:
 8005654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005658:	1f18      	subs	r0, r3, #4
 800565a:	2b00      	cmp	r3, #0
 800565c:	bfbc      	itt	lt
 800565e:	580b      	ldrlt	r3, [r1, r0]
 8005660:	18c0      	addlt	r0, r0, r3
 8005662:	4770      	bx	lr

08005664 <_init>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	bf00      	nop
 8005668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566a:	bc08      	pop	{r3}
 800566c:	469e      	mov	lr, r3
 800566e:	4770      	bx	lr

08005670 <_fini>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	bf00      	nop
 8005674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005676:	bc08      	pop	{r3}
 8005678:	469e      	mov	lr, r3
 800567a:	4770      	bx	lr
